<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>九宫重排问题</title>
      <link href="/2021/10/15/%E7%AC%AC%E4%B8%80%E7%AF%87%E5%8D%9A%E5%AE%A2/"/>
      <url>/2021/10/15/%E7%AC%AC%E4%B8%80%E7%AF%87%E5%8D%9A%E5%AE%A2/</url>
      
        <content type="html"><![CDATA[<h2 id="数据结构声明">数据结构声明</h2><p>结构体 node_t 封装移动数据 其中 data为当前序列或称当前状态 step_p 为上一步位置</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node_t</span> &#123;</span></span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">char</span> data[<span class="number">9</span>];</span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">int</span>  step_p;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>阶乘表 用于康托展开时的计算</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">long</span> <span class="keyword">int</span> fac[<span class="number">10</span>] = &#123; <span class="number">1</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">6</span>,<span class="number">24</span>,<span class="number">120</span>,<span class="number">720</span>,<span class="number">5040</span>,<span class="number">40320</span>,<span class="number">362880</span> &#125;;</span><br></pre></td></tr></table></figure><p>结构体数组 用于存放移动数据</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node_t</span> <span class="title">save_step</span>[363880];</span> </span><br></pre></td></tr></table></figure><p>定义了四种移动方法</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">char</span> move[<span class="number">4</span>][<span class="number">2</span>] = &#123; &#123;<span class="number">-1</span>,<span class="number">0</span>&#125;,&#123;<span class="number">0</span>,<span class="number">1</span>&#125;,&#123;<span class="number">1</span>,<span class="number">0</span>&#125;,&#123;<span class="number">0</span>,<span class="number">-1</span>&#125; &#125;;</span><br></pre></td></tr></table></figure><h2 id="1、康托展开判重">1、康托展开判重</h2><h3 id="1-康托展开定义">1. 康托展开定义</h3><p><img src="https://private.codecogs.com/gif.latex?X%3Dan*%28n-1%29%21+an-1*%28n-2%29%21+...+ai*%28i-1%29%21+...+a2*1%21+a1*0%21" alt="X=an*(n-1)!+an-1*(n-2)!+...+ai*(i-1)!+...+a21!+a10!"></p><p>康托展开用于判断该数列在其全排列下的次序</p><p>九宫最多有 9！即 362880 种排列</p><h3 id="2-康托展开的应用">2. 康托展开的应用</h3><p>此处为康托展开的实现 返回值<code>num</code> 就是当前序列在全排列中的次序</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">kangtuozhankai</span><span class="params">(<span class="keyword">unsigned</span> <span class="keyword">char</span> s[], <span class="keyword">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i, j, temp, num;</span><br><span class="line">    num = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        temp = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (j = i + <span class="number">1</span>; j &lt; n; j++)</span><br><span class="line">            <span class="keyword">if</span> (s[j] &lt; s[i])  <span class="comment">//判断几个数小于它</span></span><br><span class="line">                temp++;</span><br><span class="line">        num += fac[n - i - <span class="number">1</span>] * temp;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> num;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="2、BFS-算法（核心）">2、BFS 算法（核心）</h2><p>BFS（breadth-first search），属于一种盲目搜寻法，目的是系统地展开并检查图中的所有节点，以找寻结果。换句话说，它并不考虑结果的可能位置，彻底地搜索整张图，直到找到结果为止。</p><p>算法的具体实现就是如下代码中的两重循环，从返回值可以看出这是一个递归函数，返回值就是移动步数，即递归深度。</p><p>先看内部循环做了哪些工作：</p><p>​共执行了四次循环，每次循环对应上、下、左和右四种移动，对移动的结果进行了处理。具体做法是调用的下文中提到的中间函数，该中间函数会返回一个整数，返回 0 表示此次移动非法（交换位置越界），返回 1 表示普通移动，返回 2 表示找到终点。</p><p><strong>重点理解start，end， next_end 的含义</strong></p><p>要理解这三个变量的含义，不妨从它们的变化入手，在算法开始前，全局变量 start 和 end 都被初始化为 0，算法开始时将 end 的值赋给 next_end，在循环中的每一次合法移动都将结果存入数组 <code>save_step[++next_end].data</code>，并把上一步的位置 start 赋值给 <code>save_step[++next_end].step_p</code>构造结果链，在算法最后，将 start 赋值为 end+1，end 赋值为 next_end。那么这些步骤完成了什么样的工作，或者说有什么作用呢？</p><p>我们知道，在 BFS 算法中需要使用栈来存放每一次的结果，而我们的代码中好像并没有使用栈这种数据结构。所以上述的步骤就是完成了这样的工作，start 可看做每次算法的栈顶，而 end 则是栈底。</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> start = <span class="number">0</span>, end = <span class="number">0</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">bfs</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> x, y;</span><br><span class="line">    <span class="keyword">int</span> next_end = end;           <span class="comment">//存放下次bfs的end标志位</span></span><br><span class="line">    <span class="keyword">int</span> err, i;</span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">char</span> temp[<span class="number">9</span>];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (; start &lt;= end; start++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; <span class="number">4</span>; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">memcpy</span>(temp, (<span class="keyword">unsigned</span> <span class="keyword">char</span>*)save_step[start].data, <span class="number">9</span>);</span><br><span class="line"></span><br><span class="line">            err = zero(i, temp);     <span class="comment">//处理数据里的0</span></span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (err)   <span class="comment">//保存数据</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="built_in">memcpy</span>((<span class="keyword">unsigned</span> <span class="keyword">char</span>*)save_step[++next_end].data, temp, <span class="number">9</span>);</span><br><span class="line"></span><br><span class="line">                save_step[next_end].step_p = start;     <span class="comment">//记录上次步数位置.      </span></span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> (err == <span class="number">2</span>)  <span class="comment">//找到终点</span></span><br><span class="line">                &#123;</span><br><span class="line">                    end_index = next_end;          <span class="comment">//记录终点步数位置.</span></span><br><span class="line">                    <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    start = end + <span class="number">1</span>;</span><br><span class="line">    end = next_end;</span><br><span class="line">    <span class="keyword">return</span> (<span class="number">1</span> + bfs());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="3、BFS-与康托展开的中间函数">3、BFS 与康托展开的中间函数</h2><p>零（空格）的移动</p><p><strong>重点理解 x，y 的含义</strong></p><p>此处的 x，y 实际上是将一维数组转换为二维表示，横轴为 x，纵轴为 y，可代入具体数据进行验证</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">zero</span><span class="params">(<span class="keyword">int</span> i, <span class="keyword">unsigned</span> <span class="keyword">char</span> data[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> x, y, temp, num;</span><br><span class="line">    <span class="keyword">int</span> j;</span><br><span class="line">    <span class="keyword">for</span> (j = <span class="number">0</span>; j &lt; <span class="number">9</span>; j++)</span><br><span class="line">        <span class="keyword">if</span> (data[j] == <span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line"></span><br><span class="line">            x = j % <span class="number">3</span> + move[i][<span class="number">0</span>];</span><br><span class="line">            y = j / <span class="number">3</span> + move[i][<span class="number">1</span>];</span><br><span class="line"></span><br><span class="line">            <span class="comment">/*判断交换位置是否越界*/</span></span><br><span class="line">            <span class="keyword">if</span> (x &lt; <span class="number">0</span> || x&gt;<span class="number">2</span>)</span><br><span class="line">                <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (y &lt; <span class="number">0</span> || y&gt;<span class="number">2</span>)</span><br><span class="line">                <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">            <span class="comment">/*判断交换后的位置是否已被走过*/</span></span><br><span class="line">            data[j] = data[x + y * <span class="number">3</span>];</span><br><span class="line">            data[x + y * <span class="number">3</span>] = <span class="number">0</span>;</span><br><span class="line">            num = kangtuozhankai(data, <span class="number">9</span>);</span><br><span class="line">            <span class="keyword">if</span> (step[num] == <span class="number">1</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (<span class="built_in">memcmp</span>(end_p, data, <span class="number">9</span>) == <span class="number">0</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="number">2</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            step[num] = <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="4、一些其他的函数">4、一些其他的函数</h2><h3 id="打印结果">打印结果</h3><p>利用 bfs 算法中构造的结果链可以很容易地完成</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">print</span><span class="params">(<span class="keyword">int</span> step_num)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;打印步数具体内容\n&quot;</span>);</span><br><span class="line">    <span class="keyword">for</span> (; step_num &gt;= <span class="number">0</span>; step_num--)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;****第%d步****\n&quot;</span>, step_num);</span><br><span class="line">        <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; <span class="number">3</span>; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;%d %d %d\n&quot;</span>, save_step[end_index].data[i * <span class="number">3</span>],</span><br><span class="line">                save_step[end_index].data[i * <span class="number">3</span> + <span class="number">1</span>],</span><br><span class="line">                save_step[end_index].data[i * <span class="number">3</span> + <span class="number">2</span>]);</span><br><span class="line">        &#125;</span><br><span class="line">        end_index = save_step[end_index].step_p;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="判断无解">判断无解</h3><p>在上面已经讨论过 bfs 是一种盲目搜寻法，找到结果的方式就是对整张图进行遍历，直至找到结果，那么如果九宫问题本身就是无解，那么花费的时间一定是很多的。针对这个问题如何解决？</p><p>引入对换、排列的奇偶性和逆序数的概念</p><p><strong>在排列中将任意两个元素对调，其余元素不动，这种作出新排列的手续叫做对换。</strong></p><p>已知定理：一个排列中任意两个元素对换，排列改变奇偶性</p><p>推论：奇排列调成标准排列的对换次数为奇数，偶排列调成标准排列的对换次数为偶数</p><p><strong>在一个排列中,如果一对数的前后位置与大小顺序相反,即前面的数大于后面的数,那么它们就称为一个逆序.一个排列中逆序的总数就称为这个排列的逆序数。</strong></p><p><strong>逆序数为偶数的排列称为偶排列；逆序数为奇数的排列称为奇排列.如2431中,21,43,41,31是逆序,逆序数是4,为偶排列。</strong></p><p>那么在我们的代码中，目标序列为 123456780 很显然是一个偶排列，所以可知有解的排列只能是进行偶数次对换的偶排列和奇数次对换的奇排列。</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">check1</span><span class="params">(<span class="keyword">unsigned</span> <span class="keyword">char</span> step[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i, j;</span><br><span class="line">    <span class="keyword">int</span> num = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; <span class="number">9</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span> (j = i; j &lt; <span class="number">9</span>; j++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (step[i] &gt; step[j])</span><br><span class="line">                num++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> (num % <span class="number">2</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">check</span><span class="params">(<span class="keyword">unsigned</span> <span class="keyword">char</span> step[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i;</span><br><span class="line">    <span class="keyword">int</span> p;</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; <span class="number">9</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (step[i] == <span class="number">0</span>)</span><br><span class="line">            p = i;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (check1(step) == ((<span class="number">8</span> - p) % <span class="number">2</span>))</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr>]]></content>
      
      
      <categories>
          
          <category> 数据结构 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C </tag>
            
            <tag> BFS </tag>
            
            <tag> 数据结构 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java多线程编程（一）</title>
      <link href="/2021/10/15/Java%E5%A4%9A%E7%BA%BF%E7%A8%8B%E7%BC%96%E7%A8%8B%E4%B8%80/"/>
      <url>/2021/10/15/Java%E5%A4%9A%E7%BA%BF%E7%A8%8B%E7%BC%96%E7%A8%8B%E4%B8%80/</url>
      
        <content type="html"><![CDATA[<h1>第一章 Java多线程技能</h1><h1>前言</h1><p>作为多线程编程的第一章，主要介绍Thread类的核心方法</p><blockquote>线程如何启动<br>如何使线程暂停<br>线程的优先级<br>线程安全相关问题<br></blockquote><h1>一、进程和多线程概述</h1><p><a href="https://baike.baidu.com/item/%E8%BF%9B%E7%A8%8B/382503?fr=aladdin">进程</a>是受操作系统管理的基本运行单元。<br><br>程序是指令序列，这些指令可以让CPU完成指定的任务。.java程序经编译后形成.class文件，在Windows中启动一个JVM虚拟机相当于创建了一个进程，在虚拟机中加载class文件并运行，在class文件中通过执行创建新线程的代码来执行具体的任务。测试用代码如下：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test1</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Thread.sleep(Integer.MAX_VALUE);</span><br><span class="line">        &#125;   <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Test1类在重复运行3次后，可以在任务管理器的进程列表中看到创建了3个javaw.exe进程，说明每执行一次main()方法就创建一个进程，其本质就是JVM虚拟机进程。</p><p><a href="https://baike.baidu.com/item/%E7%BA%BF%E7%A8%8B/103101?fr=aladdin">线程</a>可以理解为在进程中独立运行的子任务。</p><p>使用多线程有什么优点？可以大幅利用CPU的空闲时间来处理其他任务，使用多线程技术可以在同一时间执行更多不同的任务。</p><p><strong>在什么场景下使用多线程技术？</strong></p><blockquote>1） 阻塞。一旦系统中出现了阻塞现象，则可以根据实际情况来使用多线程技术提高运行效率。<br>2）依赖。业务分为两个执行过程，分别是A和B。当A业务发生阻塞情况时，B业务的执行不依赖与A业务的执行结果，这时可以使用多线程技术来提高运行效率；如果B业务的执行依赖A业务的运行结果，则可以不适用多线程技术，按顺序进行业务的执行。</blockquote><h1>二、使用多线程</h1><p>实现多线程编程主要有两种方式：一种是继承Thread类，另一种是实现Runnable接口。</p><h2 id="1-继承Thread类">1.继承Thread类</h2><p>Thread类的声明结构：<code>public class Thread implements Runnable</code><br>从上面的源代码中可以发现，Thread实现了Runnable接口，它们之间具有多态关系，多态结构的示例代码如下:</p><p><code>Runnable run1 = new Thread();</code></p><p><code>Runnable run2 = new MyThread();</code></p><p><code>Thread t1 = new MyThread();</code></p><p><strong>使用Thread类的方式创建新线程时，最大的局限是不支持多继承，因为Java语言的特点是单根继承，所以为了支持多继承，完全可以实现Runnable接口。</strong></p><p>创建一个自定义的线程类MyThread.java，此类继承自Thread，并且重写run()方法。在run()方法中添加新线程要执行的代码如下：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> mythread;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyThread</span> <span class="keyword">extends</span> <span class="title">Thread</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.run();</span><br><span class="line">        System.out.println(<span class="string">&quot;MyThread&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行类代码如下：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> mythread.MyThread;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Run</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        MyThread myThread = <span class="keyword">new</span> MyThread();</span><br><span class="line">        myThread.start();<span class="comment">//耗时大</span></span><br><span class="line">        System.out.println(<span class="string">&quot;运行结束！&quot;</span>);<span class="comment">//耗时小</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面代码使用start()方法启动一个线程，线程启动后会自动调用线程对象中的run()方法，run()方法中的代码就是线程对象要执行的任务，是线程任务的入口。<br>start()方法耗时的原因是执行了多个步骤，具体如下：</p><blockquote>1）通过JVM告诉操作系统创建Thread<br>2）操作系统开辟内存并使用Windows SDK中的creatThread()函数创建Thread线程对象。<br>3）操作系统对Thread对象进行调度，以确定执行时机。<br>4）Thread在操作系统中被成功执行。</blockquote><p>在使用多线程技术时代码的运行结果与代码的执行顺序和调用顺序是无关的。另外，线程是一个子任务，CPU以不确定的方式，或者说是以随机的时间来调用线程中的run()方法。</p><h2 id="2-线程随机性的展现">2.线程随机性的展现</h2><p>创建自定义线程类MyThread.java的代码如下：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> mythread;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyThread</span> <span class="keyword">extends</span> <span class="title">Thread</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10000</span>; i++) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;run=&quot;</span> + Thread.currentThread().getName());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>再创建运行类Test.java代码：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> mythread.MyThread;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        MyThread thread = <span class="keyword">new</span> MyThread();</span><br><span class="line">        thread.setName(<span class="string">&quot;myThread&quot;</span>);</span><br><span class="line">        thread.start();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10000</span>; i++) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;main=&quot;</span> + Thread.currentThread().getName());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Thread.java中的start()方法通知“线程规划器”——此线程已经准备就绪，准备调用线程对象的run()方法。如果调用thread.run()方法，而不是thread.start()方法，其实就不是异步执行了，而是同步进行。<br>多线程随机输出的原因是CPU将时间片分给不同的线程，线程获得时间片后就执行任务。时间片即CPU分配给各个程序的时间。每个线程被分配一个时间片，在当前的时间片内CPU去执行线程中的任务。<strong>CPU在不同的线程进行切换是需要耗时的，所以并不是创建的线程越多，运行效率就越高。</strong></p><h2 id="3-实现Runnable接口">3.实现Runnable接口</h2><p>如果想创建的线程类已经有一个父类了，就不能再继承Thread类，所以需要实现Runnable接口来解决这样的情况。<br>创建一个实现Runnable接口的MyRunnable类，代码如下：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> myrunnable;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyRunnable</span> <span class="keyword">implements</span> <span class="title">Runnable</span></span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;运行中！&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行类代码如下：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> myrunnable.MyRunnable;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Run</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Runnable runnable = <span class="keyword">new</span> MyRunnable();</span><br><span class="line">        Thread thread = <span class="keyword">new</span> Thread(runnable);</span><br><span class="line">        thread.start();</span><br><span class="line">        System.out.println(<span class="string">&quot;运行结束！&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="4-使用Runnable接口实现多线程的优点">4.使用Runnable接口实现多线程的优点</h2><p>首先创建业务A类：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> service;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AServer</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">a_save_method</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;a中的保存数据方法被执行&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>再创建业务B类：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> service;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BServer</span> <span class="keyword">extends</span> <span class="title">AServer</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">a_save_method</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;b中的保存数据方法被执行&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">b_save_method();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>通过实现Runnable接口，可间接地实现“多继承”的效果。在非多继承的情况下，使用继承Thread类和实现Runnable接口两种方式在去的程序运行的结果上没什么太大区别，一旦出现“多继承”的情况，则采用实现Runnable接口的方式来处理多线程问题是很必要的。</p><h2 id="5-实例变量共享造成的非线程安全问题与解决方案">5.实例变量共享造成的非线程安全问题与解决方案</h2><p>自定义线程类中的实例变量针对其他线程可以有共享和不共享之分，在多个线程之间交互时是很重要的技术点。</p><h3 id="不共享数据的情况">不共享数据的情况</h3><p>每个线程都有各自的变量，各自控制自己的变量，变量不共享，不存在多个线程访问同一个变量的问题。</p><h3 id="共享数据的情况">共享数据的情况</h3><p>共享数据的情况就是多个线程可以访问同一个变量，不同线程可能同时对一个变量进行处理，就会产生“非线程安全问题”。可以通过在run()方法前加入<strong>synchronized</strong>关键字，使多个线程在执行run()方法时，以排队的方式进行处理。<strong>synchronized</strong>关键字可以对任意对象及方法加锁，而加锁的代码被称为“互斥区”或“临界区”。<br>当一个线程想要执行同步方法里面的代码时，就会首先尝试申请这把锁，如果申请到这把锁，则执行互斥区代码；若申请不到，就会一直申请这把锁，直到申请到为止，而且多个线程会争抢这把锁。</p><h2 id="6-Servlet技术造成的非线程安全问题与解决方案">6.Servlet技术造成的非线程安全问题与解决方案</h2><p>非线程安全问题主要是指多个线程对同一个对象中的同一个实例变量进行操作时会出现值被更改，值不同步的情况，影响程序执行流程。示例如下：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LoginServlet</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> String usernameRef;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> String passwordRef;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">doPost</span><span class="params">(String username, String password)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            usernameRef = username;</span><br><span class="line">            <span class="keyword">if</span> (username.equals(<span class="string">&quot;a&quot;</span>)) &#123;</span><br><span class="line">                Thread.sleep(<span class="number">5000</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            passwordRef = password;</span><br><span class="line"></span><br><span class="line">            System.out.println(<span class="string">&quot;username=&quot;</span> + usernameRef + <span class="string">&quot; password=&quot;</span> + password);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            <span class="comment">// TODO Auto-generated catch block</span></span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">运行结果1：</span></span><br><span class="line"><span class="comment">b bb</span></span><br><span class="line"><span class="comment">a aa</span></span><br><span class="line"><span class="comment">运行结果2:</span></span><br><span class="line"><span class="comment">a bb</span></span><br><span class="line"><span class="comment">a aa</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><p>线程ALogin.java代码如下：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> extthread;</span><br><span class="line"><span class="keyword">import</span> controller.LoginServlet;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ALogin</span> <span class="keyword">extends</span> <span class="title">Thread</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        LoginServlet.doPost(<span class="string">&quot;a&quot;</span>, <span class="string">&quot;aa&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>线程BLogin.java代码如下：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> extthread;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> controller.LoginServlet;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BLogin</span> <span class="keyword">extends</span> <span class="title">Thread</span></span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        LoginServlet.doPost(<span class="string">&quot;b&quot;</span>, <span class="string">&quot;bb&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>运行类Run.java代码如下：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> extthread.ALogin;</span><br><span class="line"><span class="keyword">import</span> extthread.BLogin;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Run</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        ALogin a = <span class="keyword">new</span> ALogin();</span><br><span class="line">        a.start();</span><br><span class="line">        BLogin b = <span class="keyword">new</span> BLogin();</span><br><span class="line">        b.start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>解决如上“非线程安全”问题同样可以使用<strong>synchronized</strong>关键字，更改代码如下：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LoginServlet</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> String usernameRef;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> String passwordRef;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">synchronized</span> <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">doPost</span><span class="params">(String username, String password)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            usernameRef = username;</span><br><span class="line">            <span class="keyword">if</span> (username.equals(<span class="string">&quot;a&quot;</span>)) &#123;</span><br><span class="line">                Thread.sleep(<span class="number">5000</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            passwordRef = password;</span><br><span class="line"></span><br><span class="line">            System.out.println(<span class="string">&quot;username=&quot;</span> + usernameRef + <span class="string">&quot; password=&quot;</span> + password);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            <span class="comment">// TODO Auto-generated catch block</span></span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">输出结果：</span></span><br><span class="line"><span class="comment">a aa</span></span><br><span class="line"><span class="comment">b bb</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><h1>currentThread()方法</h1><p><code>currentThread()</code>方法可返回代码段正在被哪个线程调用。<br>创建MyThread类，代码如下：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> mythread;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyThread</span> <span class="keyword">extends</span> <span class="title">Thread</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MyThread</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;构造方法的打印：&quot;</span> + Thread.currentThread().getName());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;run方法的打印：&quot;</span> + Thread.currentThread().getName());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>运行类代码如下：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> run;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> mythread.MyThread;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Run</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        MyThread myThread = <span class="keyword">new</span> MyThread();</span><br><span class="line">        myThread.start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">构造方法的打印： main</span></span><br><span class="line"><span class="comment">run方法的打印： Thread—0</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><p>MyThread.java类的构造函数是被main线程调用的，而run方法是被Thread-0线程调用的，run()方法是自动调用的方法。<br>更改代码如下：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> run;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> mythread.MyThread;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Run</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        MyThread myThread = <span class="keyword">new</span> MyThread();</span><br><span class="line">        <span class="comment">//myThread.start();</span></span><br><span class="line">        myThread.run();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">构造方法的打印： main</span></span><br><span class="line"><span class="comment">run方法的打印： main</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><p>执行方法run()和start()的区别</p><blockquote>1）my.run();：立即执行run()方法，不启动新的线程。<br>2）my.start();：执行run()的时机不确定，启动新的线程</blockquote><h1>isAlive方法</h1><p><code>isAlive()</code>方法的功能是判断当前的线程是否存活.<br>测试代码如下：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> mythread;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyThread</span> <span class="keyword">extends</span> <span class="title">Thread</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;run==&quot;</span> + <span class="keyword">this</span>.isAlive());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> run;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> mythread.MyThread;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Run</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        MyThread myThread = <span class="keyword">new</span> MyThread();</span><br><span class="line">        System.out.println(<span class="string">&quot;begin==&quot;</span> + myThread.isAlive());</span><br><span class="line">        myThread.start();</span><br><span class="line">        System.out.println(<span class="string">&quot;end==&quot;</span> + myThread.isAlive());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">begin==false</span></span><br><span class="line"><span class="comment">end==true</span></span><br><span class="line"><span class="comment">run==true</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><p>isAlive()方法的作用是测试线程是否处于活动状态。线程已经启动且尚未终止的状态即活动状态。如果线程处于正在运行或准备开始运行的状态，就认为线程是“存活”的。对于代码：<br>System.out.println(“end==” + myThread.isAlive());<br>虽然其输出的值是true，但此值是不确定的，因为此时myThread线程还未执行完毕，如果将代码更改如下：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> run;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> mythread.MyThread;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Run</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">        MyThread myThread = <span class="keyword">new</span> MyThread();</span><br><span class="line">        System.out.println(<span class="string">&quot;begin==&quot;</span> + myThread.isAlive());</span><br><span class="line">        myThread.start();</span><br><span class="line">        Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;end==&quot;</span> + myThread.isAlive());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><font color=999AAA >则代码System.out.println(“end==” + myThread.isAlive());<br>输出结果为false，因为myThread对象已经在1s之内执行完毕。</p><h1>sleep(long millis)方法</h1><p>sleep方法的使用是在指定的时间（毫秒）内让当前“正在执行的线程”休眠（暂停执行），这个“正在执行的线程”是指this.currentThread()返回的线程。<br>示例代码，类Mythread.java代码：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> mythread;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyThread</span> <span class="keyword">extends</span> <span class="title">Thread</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;run threadName=&quot;</span></span><br><span class="line">                    + <span class="keyword">this</span>.currentThread().getName() + <span class="string">&quot; begin=&quot;</span></span><br><span class="line">                    + System.currentTimeMillis());</span><br><span class="line">            Thread.sleep(<span class="number">2000</span>);</span><br><span class="line">            System.out.println(<span class="string">&quot;run threadName=&quot;</span></span><br><span class="line">                    + <span class="keyword">this</span>.currentThread().getName() + <span class="string">&quot; end=&quot;</span></span><br><span class="line">                    + System.currentTimeMillis());</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            <span class="comment">// TODO Auto-generated catch block</span></span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行类Run1.java代码如下：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> run;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> mythread.MyThread;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Run1</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        MyThread myThread = <span class="keyword">new</span> MyThread();</span><br><span class="line">        System.out.println(<span class="string">&quot;begin=&quot;</span> + System.currentTimeMillis());</span><br><span class="line">        myThread.run();</span><br><span class="line">        System.out.println(<span class="string">&quot;end=&quot;</span> + System.currentTimeMillis());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">begin=1604938554575</span></span><br><span class="line"><span class="comment">run threadName=main begin=1604938554582</span></span><br><span class="line"><span class="comment">run threadName=main end=1604938556589</span></span><br><span class="line"><span class="comment">end=1604938556589</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><p>运行类Run2.java代码如下：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> run;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> mythread.MyThread;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Run</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        MyThread myThread = <span class="keyword">new</span> MyThread();</span><br><span class="line">        System.out.println(<span class="string">&quot;begin=&quot;</span> + System.currentTimeMillis());</span><br><span class="line">        myThread.start();</span><br><span class="line">        System.out.println(<span class="string">&quot;end=&quot;</span> + System.currentTimeMillis());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">begin=1604938758015</span></span><br><span class="line"><span class="comment">end=1604938758021</span></span><br><span class="line"><span class="comment">run threadName=Thread-0 begin=1604938758021</span></span><br><span class="line"><span class="comment">run threadName=Thread-0 end=1604938760033</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><p>直接调用run()方法，main线程和MyThread线程同步执行。<br>使用start()方法启动线程，由于main线程与MyThread线程是异步执行的，所以首先输出的信息为begin和end，而MyThread线程是后执行的，在最后两行间隔了2s输出run…begin和run…end相关的信息。</p><h1>sleep(long millis, int nanos)方法</h1><p><code>sleep(long millis, int nanos)</code>方法的作用是在指定的毫秒数加指定的纳秒数内让当前正在运行的线程休眠（停止执行），此操作受到系统计时器和调度程序的精度和准确性的影响。</p><h1>StackTraceElement[] getStackTrace()方法</h1><p><code>StackTraceElement[] getStackTrace()</code>方法的作用是返回一个表示该线程堆栈跟踪元素的数组。如果该线程尚未启动或已经终止，则该方法返回一个零长度数组。如果返回的数组不是零长度的，则其第一个元素代表堆栈顶，它是该数组中最新的方法调用。最后一个元素代表堆栈底，是该数组中最旧的方法调用。</p><h1>static void dumpStack()方法</h1><p><code>static void dumpStack()</code>方法的作用的将当前线程的堆栈跟踪信息输出至标准错误流。该方法仅用于调试。</p><h1>getId()方法</h1><p><code>getId()</code>方法用于取得线程的唯一标识。</p><h1>三、停止线程</h1><p>停止一个线程意味着在线程处理完任务之前停止正在做的操作，也就是放弃当前的操作，必须做好防范措施，以便达到预期的效果。停止一个线程可以使用<code>Thread.stop()</code>方法，但是这个方法是不安全的，而且是被弃用的。<br>大多数情况下，停止一个线程使用Thread.interrupt()方法，但这个方法不会终止一个正在运行的线程，还需要加入一个判断才可以完成线程的停止。<br>在Java中有 3 种方法可以使正在运行的线程终止运行：</p><ol><li>使用退出标志使线程正常退出。</li><li><s>使用stop()方法强制终止线程。</s></li><li>使用interrupt()方法终止线程。</li></ol><h2 id="1-终止不了的线程">1. 终止不了的线程</h2><p>调用interrupt()方法仅仅是在当前线程中做了一个停止的标志，不是真正的停止线程。</p><h2 id="2-判断线程是否为停止状态">2. 判断线程是否为停止状态</h2><p>Thread.java 类提供了两个判断方法：</p><ol><li>public static boolean interrupted(): 测试currentThread() 是否已经中断。</li><li>public boolean this.isInterrupted(): 测试 this 关键字所在类的对象是否已经中断。</li></ol><h1>四、暂停线程</h1><p>暂停线程意味着此线程还可以恢复运行，可以使用suspend()方法暂停线程，使用resume()方法来恢复线程的执行。</p><h2 id="1-suspend-方法与resume-方法的缺点——独占">1. suspend()方法与resume()方法的缺点——独占</h2><p>如果suspend()与resume()方法使用不当，很容易造成公共同步对象被独占，其他线程无法访问公共同步对象的结果。若两个线程的run() 方法都调用了被synchronized 修饰的方法，A线程被暂停，则B线程即使启动也无法进入该方法。</p><h2 id="2-suspend-方法与resume-方法的缺点——数据不完整">2. suspend()方法与resume()方法的缺点——数据不完整</h2><p>线程暂停可能会导致数据不完整的情况，想要实现对线程的暂停与恢复处理，可使用wait()、notify()或notifyAll() 方法。</p><h1>四、yield()方法</h1><p>yield() 方法的作用是放弃当前的CPU资源，让其他任务去占用CPU执行时间，放弃的时间不确定，有可能刚刚放弃，马上又获得CPU时间片。</p><h1>五、线程的优先级</h1><p>在操作系统中，线程可以划分优先级，优先级较高的线程得到的CPU资源较多，也就是CPU优先执行优先级较高的线程对象中的任务，其实就是让高优先级的线程获得更多的CPU时间片。<br>设置线程优先级有助于“线程规划器”确定下一次选择哪一个线程来优先执行。设置线程优先级使用setPriority()方法。<br>在Java中，线程的优先级分为1~10共10个等级，如果优先级小于1或大于10，JDK会抛出异常 <code>throw new IllegalArgumentException()</code></p><h2 id="1-线程优先级的继承特性">1. 线程优先级的继承特性</h2><p>在Java中，线程的优先级具有继承性，例如A 线程启动B 线程，则B 线程的优先级与A 线程是一样的。</p><h2 id="2-优先级的规律性">2. 优先级的规律性</h2><p>当线程优先级的等级差距很大时，谁先被执行完和代码调用顺序无关。</p><h2 id="3-优先级的随机性">3. 优先级的随机性</h2><p>优先级高的线程并不一定每一次都先执行完run()方法中的任务，也就是线程优先级与输出顺序无关，这两者没有依赖关系，它们具有不确定性和随机性。</p><h2 id="4-优先级对线程运行速度的影响">4. 优先级对线程运行速度的影响</h2><p>优先级高的运行速度快。</p><h1>六、 守护线程</h1><p>Java中有两种线程，一种是用户线程，也称非守护线程；另一种是守护线程。<br>守护线程是一种特殊的线程，当进程中不存在非守护线程了，则守护线程自动销毁。典型的守护线程是垃圾回收线程，当进程中没有非守护线程了，则垃圾回收线程也没有存在的必要了，自动销毁。凡是调用setDaemon(true)代码并传入true 值的线程才是守护线程。要在start() 方法之前执行方法，否则会出现异常。</p><p>文章摘自《Java多线程编程核心技术》高洪岩 著</p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> 多线程 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
