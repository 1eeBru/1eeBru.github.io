<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>LCP1106题解</title>
      <link href="/2021/10/29/LCP1106%E9%A2%98%E8%A7%A3/"/>
      <url>/2021/10/29/LCP1106%E9%A2%98%E8%A7%A3/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\css\APlayer.min.css"><script src="\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\js\Meting.min.js"></script><h1>解析布尔表达式</h1><p><strong>题目：</strong></p><p>给你一个以字符串形式表述的 布尔表达式（boolean） expression，返回该式的运算结果。</p><p>有效的表达式需遵循以下约定：</p><ul><li>“t”，运算结果为 True</li><li>“f”，运算结果为 False</li><li>“!(expr)”，运算过程为对内部表达式 expr 进行逻辑 非的运算（NOT）</li><li>“&amp;(expr1,expr2,…)”，运算过程为对 2 个或以上内部表达式 expr1, expr2, … 进行逻辑 与的运算（AND）</li><li>“|(expr1,expr2,…)”，运算过程为对 2 个或以上内部表达式 expr1, expr2, … 进行逻辑 或的运算（OR）</li></ul><p><strong>思路：</strong></p><p>本题类似于四则运算，所以可以考虑使用 Dijkstra 双栈算法，使用双栈算法实现简单运算的代码可以参考 <a href="https://blog.csdn.net/ZJ_DE/article/details/79670208?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522163541645416780366591760%2522%252C%2522scm%2522%253A%252220140713.130102334..%2522%257D&amp;request_id=163541645416780366591760&amp;biz_id=0&amp;utm_medium=distribute.pc_search_result.none-task-blog-2~all~sobaiduend~default-1-79670208.pc_search_result_control_group&amp;utm_term=%E5%8F%8C%E6%A0%88%E7%AE%97%E6%B3%95&amp;spm=1018.2226.3001.4187">Dijkstra双栈算法</a>。</p><p>在本题当中，我们需要遍历表达式，</p><ul><li>遇到操作符入栈</li><li>遇到左括号入栈</li><li>遇到操作数入栈</li><li>遇到右括号弹出操作符，再依次弹出操作数直到遇到左括号，计算结果并入栈</li></ul><p>遍历完成后操作数栈栈顶元素即为结果。</p><p><strong>代码实现如下：</strong></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">parseBoolExpr</span><span class="params">(String expression)</span> </span>&#123;</span><br><span class="line">        Stack&lt;Character&gt; opr = <span class="keyword">new</span> Stack&lt;&gt;();</span><br><span class="line">        Stack&lt;Character&gt; ope = <span class="keyword">new</span> Stack&lt;&gt;();</span><br><span class="line">        <span class="keyword">int</span> flag;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; expression.length(); i++) &#123;</span><br><span class="line">            <span class="keyword">char</span> s = expression.charAt(i);</span><br><span class="line">            <span class="keyword">switch</span> (s) &#123;</span><br><span class="line">                <span class="keyword">case</span> <span class="string">&#x27;|&#x27;</span>:</span><br><span class="line">                <span class="keyword">case</span> <span class="string">&#x27;&amp;&#x27;</span>:</span><br><span class="line">                <span class="keyword">case</span> <span class="string">&#x27;!&#x27;</span>:</span><br><span class="line">                    opr.push(s);</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="string">&#x27;,&#x27;</span>:</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="string">&#x27;)&#x27;</span>:</span><br><span class="line">                    <span class="keyword">char</span> op = opr.pop();</span><br><span class="line">                    <span class="keyword">char</span> c;</span><br><span class="line">                    flag = <span class="number">0</span>;</span><br><span class="line">                    <span class="keyword">switch</span> (op) &#123;</span><br><span class="line">                        <span class="keyword">case</span> <span class="string">&#x27;|&#x27;</span>:</span><br><span class="line">                            <span class="keyword">while</span>((c=ope.pop()) != <span class="string">&#x27;(&#x27;</span>) &#123;</span><br><span class="line">                                <span class="keyword">if</span> (c == <span class="string">&#x27;t&#x27;</span>)</span><br><span class="line">                                    flag = <span class="number">1</span>;</span><br><span class="line">                            &#125;</span><br><span class="line">                            <span class="keyword">if</span> (flag == <span class="number">1</span>)</span><br><span class="line">                                ope.push(<span class="string">&#x27;t&#x27;</span>);</span><br><span class="line">                            <span class="keyword">else</span> ope.push(<span class="string">&#x27;f&#x27;</span>);</span><br><span class="line">                            <span class="keyword">break</span>;</span><br><span class="line">                        <span class="keyword">case</span> <span class="string">&#x27;&amp;&#x27;</span>:</span><br><span class="line">                            <span class="keyword">while</span>((c=ope.pop()) != <span class="string">&#x27;(&#x27;</span>) &#123;</span><br><span class="line">                                <span class="keyword">if</span> (c == <span class="string">&#x27;f&#x27;</span>)</span><br><span class="line">                                    flag = <span class="number">1</span>;</span><br><span class="line">                            &#125;</span><br><span class="line">                            <span class="keyword">if</span> (flag == <span class="number">1</span>)</span><br><span class="line">                                ope.push(<span class="string">&#x27;f&#x27;</span>);</span><br><span class="line">                            <span class="keyword">else</span> ope.push(<span class="string">&#x27;t&#x27;</span>);</span><br><span class="line">                            <span class="keyword">break</span>;</span><br><span class="line">                        <span class="keyword">case</span> <span class="string">&#x27;!&#x27;</span>:</span><br><span class="line">                            <span class="keyword">while</span>((c=ope.pop()) != <span class="string">&#x27;(&#x27;</span>) &#123;</span><br><span class="line">                                <span class="keyword">if</span> (c == <span class="string">&#x27;f&#x27;</span>)</span><br><span class="line">                                    flag = <span class="number">1</span>;</span><br><span class="line">                                <span class="keyword">else</span> flag = <span class="number">0</span>;</span><br><span class="line">                            &#125;</span><br><span class="line">                            <span class="keyword">if</span> (flag == <span class="number">1</span>) ope.push(<span class="string">&#x27;t&#x27;</span>);</span><br><span class="line">                            <span class="keyword">else</span> ope.push(<span class="string">&#x27;f&#x27;</span>);</span><br><span class="line">                            <span class="keyword">break</span>;</span><br><span class="line">                        <span class="keyword">default</span>:</span><br><span class="line">                            System.out.println(<span class="string">&quot;表达式错误，结果无效！&quot;</span>);</span><br><span class="line">                    &#125;</span><br><span class="line">                <span class="keyword">default</span>:</span><br><span class="line">                    ope.push(s);</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        ope.pop();</span><br><span class="line">        <span class="keyword">return</span> ope.pop() == <span class="string">&#x27;t&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据结构 </tag>
            
            <tag> 算法 </tag>
            
            <tag> Dijkstra 双栈算法 </tag>
            
            <tag> 力扣 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Javascript异步与Promise</title>
      <link href="/2021/10/23/Javascript%E5%BC%82%E6%AD%A5%E4%B8%8EPromise/"/>
      <url>/2021/10/23/Javascript%E5%BC%82%E6%AD%A5%E4%B8%8EPromise/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\css\APlayer.min.css"><script src="\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\js\Meting.min.js"></script><h1>JavaScript异步与Promise</h1><h2 id="Promise解决的问题">Promise解决的问题</h2><p>当一个异步任务的执行需要依赖另一个异步任务的结果时，我们一般会将两个异步任务进行嵌套，这种情况发生多次时，就形成了所谓的“回调地狱”。当代码逻辑稍微复杂一些时，程序就会变得难以维护。下面就是一个简单的例子：</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">funA</span>(<span class="params">callback</span>) </span>&#123;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&quot;A&quot;</span>);</span><br><span class="line"><span class="built_in">setTimeout</span>(() = &gt; &#123;</span><br><span class="line">callback()</span><br><span class="line">&#125;, <span class="number">100</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">funB</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&quot;B&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">funC</span>(<span class="params">callback</span>) </span>&#123;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&quot;C&quot;</span>)</span><br><span class="line"><span class="built_in">setTimeout</span>(() = &gt; &#123;</span><br><span class="line">callback()</span><br><span class="line">&#125;, <span class="number">1000</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">funD</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&quot;D&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">funE</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&quot;E&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">funF</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&quot;F&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">funA(() = &gt; &#123;</span><br><span class="line">funB()</span><br><span class="line">funC(() = &gt; &#123;</span><br><span class="line">funD()</span><br><span class="line">&#125;)</span><br><span class="line">funE()</span><br><span class="line">&#125;)</span><br><span class="line">funF()</span><br></pre></td></tr></table></figure><h2 id="什么是Promise">什么是Promise</h2><blockquote>    我走到快餐店的柜台前，点了一个起士汉堡。并交了1.47美元的现金。通过点餐和付款，我为得到一个 值（起士汉堡）制造了一个请求。我发起了一个事务。<br>    但是通常来说，起士汉堡不会立即到我手中。收银员交给一些东西代替我的起士汉堡：一个带有点餐排队号的收据。这个点餐号是一个“我欠你”的许诺（Promise），它保证我最终会得到我的起士汉堡。<br>    于是我就拿着我的收据和点餐号。我知道它代表我的 未来的起士汉堡，所以我无需再担心它——除了挨饿！<br>    在我等待的时候，我可以做其他的事情，比如给我的朋友发微信说，“嘿，一块儿吃午餐吗？我要吃起士汉堡”。<br>    我已经在用我的 未来的起士汉堡 进行推理了，即便它还没有到我手中。我的大脑可以这么做是因为它将点餐号作为起士汉堡的占位符号。这个占位符号实质上使这个值 与时间无关。它是一个 未来的值。<br>    最终，我听到，“113号！”。于是我愉快地拿着收据走回柜台前。我把收据递给收银员，拿回我的起士汉堡。 换句话说，一旦我的 未来的值 准备好，我就用我的许诺值换回值本身。<br>    但还有另外一种可能的输出。它们叫我的号，但当我去取起士汉堡时，收银员遗憾地告诉我，“对不起，看起来我们的起士汉堡卖光了。”把这种场景下顾客有多沮丧放在一边，我们可以看到 未来的值 的一个重要性质：它们既可以表示成功也可以表示失败。<br>    每次我点起士汉堡时，我都知道我要么最终得到一个起士汉堡，要么得到起士汉堡卖光的坏消息，并且不得不考虑中午吃点儿别的东西。<br>    我由等待汉堡变成了等到或者等不到，这个过程不可逆。</blockquote><p>《<strong>异步与性能</strong>》第三章中的这么个场景很形象地介绍了promise，上面的等待汉堡和得到汉堡，汉堡卖光了，得不到汉堡，分别对应promise的三种状态 <strong>pending: 进行中，既不是成功，也不是失败状态。 fulfilled: 意味着操作成功完成。 rejected: 意味着操作失败。</strong></p><p><strong>语法</strong></p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">new</span> <span class="built_in">Promise</span>( <span class="function"><span class="keyword">function</span>(<span class="params">resolve, reject</span>) </span>&#123;...&#125; ); <span class="comment">//reject参数 可不选</span></span><br></pre></td></tr></table></figure><p><strong>参数 executor</strong></p><p>executor是带有 resolve 和 reject 两个参数的函数 。Promise构造函数执行时立即调用executor 函数， resolve 和 reject 两个函数作为参数传递给executor（executor 函数在Promise构造函数返回新建对象前被调用）。resolve 和 reject 函数被调用时，分别将promise的状态改为fulfilled（完成）或rejected（失败）。executor 内部通常会执行一些异步操作，一旦完成，可以调用resolve函数来将promise状态改成fulfilled，或者在发生错误时将它的状态改为rejected。</p><p>如果在executor函数中抛出一个错误，那么该promise 状态为rejected。executor函数的返回值被忽略。</p><p>新建一个Promise的实例：</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> promise = <span class="keyword">new</span> <span class="built_in">Promise</span>((resolve, reject) = &gt; &#123;</span><br><span class="line"><span class="built_in">setTimeout</span>(() = &gt; &#123;</span><br><span class="line"><span class="keyword">let</span> random = <span class="built_in">Math</span>.random()</span><br><span class="line"><span class="keyword">if</span> (random &gt; <span class="number">0.5</span>) &#123;</span><br><span class="line">resolve(<span class="string">`resolve$ &#123;random&#125;`</span>)</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">resolve(<span class="string">`reject$ &#123;random&#125;`</span>)</span><br><span class="line">&#125;</span><br><span class="line">&#125;, <span class="number">1000</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>Promise的构造函数接收一个函数作为参数，该函数接受两个额外的函数，resolve和reject，这两个函数分别代表将当前Promise置为fulfilled(已成功)和rejected(已失败)两个状态。Promise正是通过这两个状态来控制异步操作的结果。接下来我们将讨论Promise的用法，实际上Promise上的实例promise是一个对象，不是一个函数。在声明的时候，<strong>Promise传递的参数函数会立即执行，因此Promise使用的正确姿势是在其外层再包裹一层函数</strong>。</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> run = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line"><span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line"><span class="keyword">let</span> random = <span class="built_in">Math</span>.random()</span><br><span class="line"><span class="keyword">if</span> (random &gt; <span class="number">0.5</span>) &#123;</span><br><span class="line">resolve(<span class="string">`resolve:<span class="subst">$&#123;random&#125;</span>`</span>)</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">reject(<span class="string">`reject:<span class="subst">$&#123;random&#125;</span>`</span>)</span><br><span class="line">&#125;</span><br><span class="line">&#125;, <span class="number">1000</span>)</span><br><span class="line">&#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">run()</span><br></pre></td></tr></table></figure><p>每个Promise的实例对象，都有一个then的方法，这个方法就是用来处理之前各种异步逻辑的结果。</p><p>then方法可以接受两个回调函数作为参数。第一个回调函数是Promise对象的状态变为resolved时调用，第二个回调函数是Promise对象的状态变为rejected时调用。其中，第二个函数是可选的，不一定要提供。这两个函数都接受Promise对象传出的值作为参数。</p><h3 id="Promise-then">Promise.then()</h3><p><strong>语法</strong></p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">p.then(onFulfilled,onRejected)</span><br><span class="line">p.then(<span class="function"><span class="keyword">function</span>(<span class="params">value</span>) </span>&#123;</span><br><span class="line">　　<span class="comment">// fulfillment</span></span><br><span class="line">　&#125;, <span class="function"><span class="keyword">function</span>(<span class="params">reason</span>) </span>&#123;</span><br><span class="line">　　 <span class="comment">// rejection</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p><strong>参数</strong></p><blockquote>    onFulfilled<br>    当Promise变成接受状态（fulfillment）时，该参数作为回调函数被调用。该函数有一个参数，即接受的最终结果（the fulfillment value）。如果传入的 onFulfilled 参数类型不是函数，则会在内部被替换为(x) => x ，即原样返回 promise 最终结果的函数。<br>    onRejected　(可选)<br>    当Promise变成拒绝状态（rejection ）时，该参数作为回调函数被调用。该函数有一个参数,，即拒绝的原因（the rejection reason）。<br></blockquote><p><strong>返回值</strong></p><p>then()方法返回一个Promise，而它的行为与then中的回调函数返回值有关，示例代码如下：</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> promise = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="params">reject</span> =&gt;</span>&#123;</span><br><span class="line">    reject(<span class="string">&quot;出错了!&quot;</span>)</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">// 第一个 then()</span></span><br><span class="line">.then(<span class="function"><span class="params">res</span> =&gt;</span>&#123;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">`res1:<span class="subst">$&#123;res&#125;</span>`</span>) <span class="comment">// 这里不执行</span></span><br><span class="line"><span class="keyword">return</span> <span class="number">1</span></span><br><span class="line">&#125;,<span class="function"><span class="params">err</span> =&gt;</span>&#123;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">`err1:<span class="subst">$&#123;err&#125;</span>`</span>) <span class="comment">// err1:出错了!</span></span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">// 第二个 then()</span></span><br><span class="line">.then(<span class="function"><span class="params">res</span> =&gt;</span>&#123;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">`res2:<span class="subst">$&#123;res&#125;</span>`</span>) <span class="comment">// 1</span></span><br><span class="line"><span class="keyword">throw</span> <span class="string">&quot;这是一个错误提示!&quot;</span></span><br><span class="line">&#125;,<span class="function"><span class="params">err</span> =&gt;</span>&#123;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">`err2:<span class="subst">$&#123;err&#125;</span>`</span>) <span class="comment">// 这里不执行</span></span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">// 第三个 then()</span></span><br><span class="line">.then(<span class="function"><span class="params">res</span> =&gt;</span>&#123;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">`res3:<span class="subst">$&#123;res&#125;</span>`</span>) <span class="comment">// 这里不执行</span></span><br><span class="line">&#125;,<span class="function"><span class="params">err</span> =&gt;</span>&#123;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">`err3:<span class="subst">$&#123;err&#125;</span>`</span>) <span class="comment">// 这是一个错误提示!</span></span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">// 第四个 then()</span></span><br><span class="line">.then(<span class="function"><span class="params">res</span> =&gt;</span>&#123;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">`res4:<span class="subst">$&#123;res&#125;</span>`</span>) <span class="comment">// undefined</span></span><br><span class="line">&#125;,<span class="function"><span class="params">err</span> =&gt;</span>&#123;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">`err4:<span class="subst">$&#123;err&#125;</span>`</span>) <span class="comment">// 这里不执行</span></span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">// 第五个 then()</span></span><br><span class="line">.then(<span class="function"><span class="params">res</span> =&gt;</span>&#123;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">`res5:<span class="subst">$&#123;res&#125;</span>`</span>) <span class="comment">// undefined</span></span><br><span class="line">&#125;,<span class="function"><span class="params">err</span> =&gt;</span>&#123;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">`err5:<span class="subst">$&#123;err&#125;</span>`</span>) <span class="comment">// 这里不执行</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><blockquote>如果then中的回调函数返回一个值，那么then返回的Promise将会成为接受状态，并且将返回的值作为接受状态的回调函数的参数值。<br>　　如果then中的回调函数抛出一个错误，那么then返回的Promise将会成为拒绝状态，并且将抛出的错误作为拒绝状态的回调函数的参数值。<br>　　如果then中的回调函数返回一个已经是接受状态的Promise，那么then返回的Promise也会成为接受状态，并且将那个Promise的接受状态的回调函数的参数值作为该被返回的Promise的接受状态回调函数的参数值。<br>　　如果then中的回调函数返回一个已经是拒绝状态的Promise，那么then返回的Promise也会成为拒绝状态，并且将那个Promise的拒绝状态的回调函数的参数值作为该被返回的Promise的拒绝状态回调函数的参数值。<br>　　如果then中的回调函数返回一个未定状态（pending）的Promise，那么then返回Promise的状态也是未定的，并且它的终态与那个Promise的终态相同；同时，它变为终态时调用的回调函数参数与那个Promise变为终态时的回调函数的参数是相同的。<br></blockquote><p>请读者仔细分析上述示例代码。</p><h3 id="Promise-catch">Promise.catch()</h3><p>catch()方法就类似于then(null, rejection)或then(undefined, rejection)，catch用于捕获错误，它的参数也就是then的第二个参数。</p><h2 id="ES-6对于Promise的扩展">ES 6对于Promise的扩展</h2><h3 id="Promise-all">Promise.all()</h3><p>all()方法是用于将多个Promise实例，包装成一个新的Promise实例。all方法接收的参数是一个可迭代对象，比如：Array、String等，也可以是一个数组。</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> promise = <span class="built_in">Promise</span>.all([promise1, promise2, promise3])</span><br><span class="line">        .then(<span class="function"><span class="params">res</span>=&gt;</span> &#123;</span><br><span class="line">            <span class="built_in">console</span>.log(res);</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">&#x27;Promise.all成功了!&#x27;</span>);</span><br><span class="line">        &#125;)</span><br><span class="line">        .catch(<span class="function"><span class="params">err</span>=&gt;</span>&#123;</span><br><span class="line">            <span class="built_in">console</span>.log(err)</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">&#x27;Promise.all出错了!&#x27;</span>);</span><br><span class="line">        &#125;)</span><br></pre></td></tr></table></figure><p>上例中，使用数组作为all()方法的参数，数组中的每一项都返回一个Promise实例。如果三个promise实例都返回fulfillment状态，那么all()方法返回fulfillment状态，返回一个由三个promise实例的返回值组成的数组。它们在数组中的顺序与执行顺序无关，与它们作为参数排列的顺序有关。</p><p>如果有一个返回失败（reject），那么all()方法返回失败（reject）的状态，此时第一个被reject的实例的返回值，会传递给promise的回调函数。</p><p><strong>Promise.all()只关心集体的执行结果。</strong></p><h3 id="Promise-race">Promise.race()</h3><p>Promise中的竞态，用法和all()方法类似，对应参数也与all()方法一样是一个可迭代对象，race()方法返回一个Promise，谁执行的快就返回谁的执行结果，无论结果是成功还是失败。</p><p>即使已经完成，进程也不会立即停止，还是会继续执行。</p><h3 id="Promise-finally">Promise.finally()</h3><p>finally() 方法返回一个Promise，在promise执行结束时，无论结果是成功或者是失败，在执行then()和catch()后，都会执行finally指定的回调函数,该方法是 ES 9 引入标准的。</p><h2 id="generator函数">generator函数</h2><p>在异步编程中，还有一种常用的解决方案，它就是Generator生成器函数。顾名思义，它是一个生成器，它也是一个状态机，内部拥有值及相关的状态，生成器返回一个迭代器Iterator对象，我们可以通过这个迭代器，手动地遍历相关的值、状态，保证正确的执行顺序。</p><h3 id="generator基本用法">generator基本用法</h3><p>generator函数与普通的函数相比，有两个特征：</p><ol><li>function关键字与函数名之间又一个*号</li><li>函数体内使用yield表达式来遍历状态</li></ol><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span>* <span class="title">generator</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="keyword">yield</span> <span class="string">&#x27;one&#x27;</span></span><br><span class="line"><span class="keyword">yield</span> <span class="string">&#x27;two&#x27;</span></span><br><span class="line"><span class="keyword">return</span> <span class="string">&#x27;three&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> fun1 = generator()</span><br><span class="line"><span class="built_in">console</span>.log(fun1)</span><br><span class="line"><span class="built_in">console</span>.log(fun1.next())  </span><br><span class="line"><span class="built_in">console</span>.log(fun1.next())</span><br><span class="line"><span class="built_in">console</span>.log(fun1.next())</span><br><span class="line"><span class="built_in">console</span>.log(fun1.next())</span><br></pre></td></tr></table></figure><p>上述代码定义了一个generator生成器函数，调用之后返回了一个迭代器对象，调用方法next后，函数内执行第一条yield语句，输出当前的状态done（生成器函数是否已经执行完毕并返回），以及返回值value（一般为yield关键字后面的运算结果）。</p><p>每调用一次next就执行一条yield语句，并在此处暂停。</p><p>当在生成器函数中显式 return 时，会导致生成器立即变为完成状态，就退出了生成器函数，后续如果还有yield操作就不再执行了，即调用 next() 方法返回的对象的 done 为 true。如果 return 后面跟了一个值，那么这个值会作为当前调用 next() 方法返回的 value 值。</p><h3 id="yield和yield">yield和yield*</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span>* <span class="title">generator</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="keyword">yield</span> <span class="string">&#x27;one&#x27;</span></span><br><span class="line">      <span class="keyword">yield</span>* generator2(<span class="number">13</span>)</span><br><span class="line">      <span class="keyword">return</span> <span class="string">&#x27;three&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span>* <span class="title">generator2</span>(<span class="params">num</span>) </span>&#123;</span><br><span class="line">      <span class="keyword">yield</span> num</span><br><span class="line">      <span class="keyword">yield</span> num + <span class="number">1</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> Ljj = generator()</span><br><span class="line"><span class="built_in">console</span>.log(Ljj.next())</span><br><span class="line"><span class="built_in">console</span>.log(Ljj.next())</span><br><span class="line"><span class="built_in">console</span>.log(Ljj.next())</span><br><span class="line"><span class="built_in">console</span>.log(Ljj.next())</span><br></pre></td></tr></table></figure><p>当这个迭代器的 next() 方法被调用时，其内的语句会执行到第一个（后续）出现yield的位置为止，yield 是你给什么它提取什么，但是 yield* 会继续向下请求，将执行权移交给另一个生成器函数，当前生成器暂停执行，直到提取完为止。</p><p><em><em>注意：yield和yield</em> 只能在generator函数内部使用，一般的函数内使用会报错</em>*</p><h3 id="next-中传参">next()中传参</h3><p>调用 next()方法时，如果传入了参数，那么这个参数会作为上一条执行的 yield 语句的返回值.</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span>* <span class="title">generator</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    x = <span class="keyword">yield</span> <span class="number">1</span>;</span><br><span class="line">    y = <span class="keyword">yield</span> x * <span class="number">2</span>;</span><br><span class="line">    <span class="keyword">yield</span> y * <span class="number">3</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> Ljj = generator();</span><br><span class="line"><span class="built_in">console</span>.log(Ljj.next());</span><br><span class="line"><span class="built_in">console</span>.log(Ljj.next());</span><br><span class="line"><span class="built_in">console</span>.log(Ljj.next(<span class="number">2</span>));</span><br><span class="line"><span class="built_in">console</span>.log(Ljj.next());</span><br></pre></td></tr></table></figure><p>第一次调用next之后返回值x为1，但在第二次调用next的时候x其实是undefined的，因为generator不会自动保存相应变量值，我们需要手动的指定，这时y值为NaN，在第三次调用next的时候执行到yield 3 * y，通过传参将上次yield返回值y设为2，得到结果6</p><h3 id="for…of循环代替next">for…of循环代替next()</h3><p>除了使用.next()方法遍历迭代器对象外，通过ES 6提供的新循环方式for…of也可遍历，但与next不同的是，它会忽略return返回的值。</p><h2 id="async函数">async函数</h2><p>async作为一个关键字放到函数前面，用于表示函数是一个异步函数，异步函数不会阻塞后面代码的执行。async函数返回的是一个promise对象，如果要获取promise的返回值，还要使用then方法。</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">testAsync</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="string">&quot;Hello World&quot;</span></span><br><span class="line">&#125;</span><br><span class="line">testAsync().then(<span class="function"><span class="params">res</span> =&gt;</span>&#123;<span class="built_in">console</span>.log(res)&#125;)</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&quot;我在后面,我执行了!&quot;</span>)</span><br></pre></td></tr></table></figure><h3 id="await关键字">await关键字</h3><p>await关键字和yield关键字一样，不能够单独使用。await关键字需要使用在async函数中，它的后面可以跟任何表达式，它的作用是阻塞主函数的执行，直到后面的表达式返回结果。</p><p>原文链接：<a href="https://blog.csdn.net/qq_42911663/article/details/85790181">https://blog.csdn.net/qq_42911663/article/details/85790181</a></p>]]></content>
      
      
      <categories>
          
          <category> JavaScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
            <tag> Promise </tag>
            
            <tag> ES6 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>理解Javascript回调函数</title>
      <link href="/2021/10/23/%E7%90%86%E8%A7%A3Javascript%E5%9B%9E%E8%B0%83%E5%87%BD%E6%95%B0/"/>
      <url>/2021/10/23/%E7%90%86%E8%A7%A3Javascript%E5%9B%9E%E8%B0%83%E5%87%BD%E6%95%B0/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\css\APlayer.min.css"><script src="\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\js\Meting.min.js"></script><h1>理解JavaScript回调函数</h1><p>在JavaScript中，function 是内置的类对象，也就是说它是一种类型的对象，可以和其他类的对象一样用于内置对象的管理。因为function 实际上是一种对象，它可以存储在变量中，通过参数传递给（另一个）函数，在函数内部创建，从函数中返回结果值。因为function是内置对象，我们可以将它作为参数传递给另一个函数，延迟到函数中执行，甚至执行后将它返回。</p><p><strong>回调函数</strong>来自一种著名的编程范式——<strong>函数式编程</strong>，在基本层面上，函数式编程指定的了函数的参数。</p><h2 id="什么是回调或高级函数？">什么是回调或高级函数？</h2><p>回调函数指的是需要在将来不确定的某一时刻异步调用的函数。回调函数被认为是一种高级函数，一种被作为参数传递给另一个函数(在这称作&quot;otherFunction&quot;)的高级函数，回调函数会在otherFunction内被调用(或执行)。回调函数的本质是一种模式(一种解决常见问题的模式)，因此回调函数也被称为回调模式。下面是一个回调函数的例子：</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> friends = [<span class="string">&quot;Mike&quot;</span>, <span class="string">&quot;Stacy&quot;</span>, <span class="string">&quot;Andy&quot;</span>, <span class="string">&quot;Rick&quot;</span>];</span><br><span class="line"> </span><br><span class="line">friends.forEach(<span class="function"><span class="keyword">function</span> (<span class="params">eachName, index</span>)</span>&#123;</span><br><span class="line"><span class="built_in">console</span>.log(index + <span class="number">1</span> + <span class="string">&quot;. &quot;</span> + eachName);</span><br><span class="line">    <span class="comment">// 1. Mike, 2. Stacy, 3. Andy, 4. Rick</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h2 id="回调函数是如何实现的？">回调函数是如何实现的？</h2><p>我们可以像使用变量一样使用函数，作为另一个函数的参数，在另一个函数中作为返回结果，在另一个函数中调用它。当我们作为参数传递一个回调函数给另一个函数时，我们只传递了这个函数的定义，并没有在参数中执行它。</p><p>当包含(调用)函数拥有了在参数中定义的回调函数后，它可以在任何时候调用(也就是回调)它。</p><p>回调函数是闭包的<br>当作为参数传递一个回调函数给另一个函数时，回调函数将在包含函数函数体内的某个位置被执行，就像回调函数在包含函数的函数体内定义一样。这意味着回调函数是闭包的，闭包函数可以访问包含函数的作用域，所以，回调函数可以访问包含函数的变量，甚至是全局变量。</p><h2 id="实现回调函数的基本原则">实现回调函数的基本原则</h2><p><strong>使用命名函数或匿名函数作为回调</strong></p><p>在前面的的例子中，我们在包含函数的参数中定义匿名函数，这是使用回调函数的通用形式之一，另一个经常被使用的形式是定义一个带名称的函数，并将函数名作为参数传递给另一个函数。</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> allUserData = [];</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">logStuff</span> (<span class="params">userData</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> ( <span class="keyword">typeof</span> userData === <span class="string">&quot;string&quot;</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(userData);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> ( <span class="keyword">typeof</span> userData === <span class="string">&quot;object&quot;</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">var</span> item <span class="keyword">in</span> userData) &#123;</span><br><span class="line">            <span class="built_in">console</span>.log(item + <span class="string">&quot;: &quot;</span> + userData[item]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getInput</span> (<span class="params">options, callback</span>) </span>&#123;</span><br><span class="line">    allUserData.push (options);</span><br><span class="line">    callback (options);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">getInput (&#123;<span class="attr">name</span>:<span class="string">&quot;Rich&quot;</span>, <span class="attr">speciality</span>:<span class="string">&quot;JavaScript&quot;</span>&#125;, logStuff);</span><br><span class="line"><span class="comment">//  name: Rich</span></span><br><span class="line"><span class="comment">// speciality: JavaScript</span></span><br></pre></td></tr></table></figure><p><strong>传递参数给回调函数</strong></p><p>因为回调函数在执行的时候就和一般函数一样，我们可以传递参数给它。可以将包含函数的任何属性(或全局的属性)作为参数传递回调函数。在上一个例子中，我们将包含函数的options作为参数传递给回调函数。</p><p><strong>在执行之前确保回调是一个函数</strong></p><p>在调用之前，确保通过参数传递进来的回调是一个需要的函数通常是明智的。如果没有检查传递进来的是否是一个函数，或者是否通过参数传递进来了，那么代码可能会导致运行时错误。</p><p><strong>使用含有this对象的回调函数的问题</strong></p><p>当回调函数是一个含有this对象的方法时，我们必须修改执行回调函数的方法以保护this对象的内容。否则this对象将会指向全局的window对象(如果回调函数传递给了全局函数)，或指向包含函数。</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> clientData = &#123;</span><br><span class="line">    <span class="attr">id</span>: <span class="number">094545</span>,</span><br><span class="line">    <span class="attr">fullName</span>: <span class="string">&quot;Not Set&quot;</span>,</span><br><span class="line">    <span class="attr">setUserName</span>: <span class="function"><span class="keyword">function</span> (<span class="params">firstName, lastName</span>)  </span>&#123;</span><br><span class="line">      <span class="built_in">this</span>.fullName = firstName + <span class="string">&quot; &quot;</span> + lastName;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getUserInput</span>(<span class="params">firstName, lastName, callback</span>)  </span>&#123;</span><br><span class="line">    callback (firstName, lastName);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">getUserInput (<span class="string">&quot;Barack&quot;</span>, <span class="string">&quot;Obama&quot;</span>, clientData.setUserName);</span><br><span class="line"> </span><br><span class="line"><span class="built_in">console</span>.log (clientData.fullName);<span class="comment">// Not Set</span></span><br><span class="line"> </span><br><span class="line"><span class="built_in">console</span>.log (<span class="built_in">window</span>.fullName); <span class="comment">// Barack Obama</span></span><br></pre></td></tr></table></figure><p>在上述代码中，当clientData.setUserName被执行时，this.fullName不会设置clientData 对象中的属性fullName，而是设置window 对象中的fullName，因为getUserInput是一个全局函数。出现这种现象是因为在全局函数中this对象指向了window对象。</p><p><strong>使用Call或Apply函数保护this对象</strong></p><p>我们可以通过使用 Call 或 Apply函数来解决前面示例中的问题。JavaScript中的每一个函数都有两个方法:Call和Apply。这些方法可以被用来在函数内部设置this对象的内容，并内容传递给函数参数指向的对象。</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getUserInput</span>(<span class="params">firstName, lastName, callback, callbackObj</span>)  </span>&#123;</span><br><span class="line">    callback.apply (callbackObj, [firstName, lastName]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">getUserInput (<span class="string">&quot;Barack&quot;</span>, <span class="string">&quot;Obama&quot;</span>, clientData.setUserName, clientData);</span><br><span class="line"> </span><br><span class="line"><span class="built_in">console</span>.log (clientData.fullName); <span class="comment">// Barack Obama</span></span><br></pre></td></tr></table></figure><p>参考文章链接：<a href="https://blog.csdn.net/luoweifu/article/details/41466537?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522163481784316780262573369%2522%252C%2522scm%2522%253A%252220140713.130102334..%2522%257D&amp;request_id=163481784316780262573369&amp;biz_id=0&amp;utm_medium=distribute.pc_search_result.none-task-blog-2~all~sobaiduend~default-2-41466537.pc_search_result_control_group&amp;utm_term=javascript+%E5%9B%9E%E8%B0%83%E5%87%BD%E6%95%B0&amp;spm=1018.2226.3001.4187">https://blog.csdn.net/luoweifu/article/details/41466537?ops_request_misc=%7B%22request%5Fid%22%3A%22163481784316780262573369%22%2C%22scm%22%3A%2220140713.130102334..%22%7D&amp;request_id=163481784316780262573369&amp;biz_id=0&amp;utm_medium=distribute.pc_search_result.none-task-blog-2~all~sobaiduend~default-2-41466537.pc_search_result_control_group&amp;utm_term=javascript+回调函数&amp;spm=1018.2226.3001.4187</a></p>]]></content>
      
      
      <categories>
          
          <category> JavaScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
            <tag> 回调函数 </tag>
            
            <tag> 前端 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>canvas基础</title>
      <link href="/2021/10/21/canvas%E5%9F%BA%E7%A1%80/"/>
      <url>/2021/10/21/canvas%E5%9F%BA%E7%A1%80/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\css\APlayer.min.css"><script src="\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\js\Meting.min.js"></script><h2 id="1-Canvas-简介">1. Canvas 简介</h2><p>Canvas是HTML5的一个新标签，属于H5的新特性。简单来说canvas就是一块画布，通常使用JavaScript脚本来绘制图形。Canvas是由HTML代码配合高度和宽度属性而定义出的可绘制区域，JavaScript代码可以访问该区域，类似于其他通用的二维API，通过一套完整的绘图函数来动态生成图形。</p><h2 id="2-Canvas-基本使用">2. Canvas 基本使用</h2><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">canvas</span> <span class="attr">id</span>=<span class="string">&quot;tutorial&quot;</span> <span class="attr">width</span>=<span class="string">&quot;300&quot;</span> <span class="attr">height</span>=<span class="string">&quot;300&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">canvas</span>&gt;</span></span><br></pre></td></tr></table></figure><p><code>&lt;canvas&gt;</code>标签只有两个可选属性，就是width和height。如果不设置这两个属性，那么width默认为300、height为150，单位都是px。也可以使用css属性来设置宽高，但是如果宽高属性和初始比例不一致，就会出现扭曲。</p><p>支持canvas的浏览器会只渲染canvas标签，而忽略其中的内容。不支持canvas的浏览器会直接渲染其中的替代内容。</p><p>canvas会创建一个固定大小的画布，会公开一个或多个<strong>渲染上下文</strong>（画笔），使用<strong>渲染上下文</strong>来绘制和处理需要展示的内容。</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> canvas = <span class="built_in">document</span>.getElementById(<span class="string">&#x27;tutorial&#x27;</span>)</span><br><span class="line"><span class="comment">// 获取2d上下文对象</span></span><br><span class="line"><span class="keyword">var</span> ctx = canvas.getContext(<span class="string">&#x27;2d&#x27;</span>)</span><br></pre></td></tr></table></figure><p>上述就是获取<strong>渲染上下文</strong>的一段JavaScript代码，其他上下文，比如WebGL使用的基于OpenGL ES的3D上下文不在本文的范围之内。</p><p>代码模板：</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;html&gt;</span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Canvas tutorial<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">&quot;text/css&quot;</span>&gt;</span><span class="css"></span></span></span><br><span class="line"><span class="css"><span class="xml">        <span class="selector-tag">canvas</span> &#123;</span></span></span><br><span class="line"><span class="css"><span class="xml">            <span class="attribute">border</span>: <span class="number">1px</span> solid black;</span></span></span><br><span class="line"><span class="css"><span class="xml">        &#125;</span></span></span><br><span class="line"><span class="css"><span class="xml">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">canvas</span> <span class="attr">id</span>=<span class="string">&quot;tutorial&quot;</span> <span class="attr">width</span>=<span class="string">&quot;300&quot;</span> <span class="attr">height</span>=<span class="string">&quot;300&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">canvas</span>&gt;</span></span></span><br><span class="line">&lt;/body&gt;</span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="javascript"></span></span></span><br><span class="line"><span class="javascript"><span class="xml">    <span class="function"><span class="keyword">function</span> <span class="title">draw</span>(<span class="params"></span>)</span>&#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">        <span class="keyword">var</span> canvas = <span class="built_in">document</span>.getElementById(<span class="string">&#x27;tutorial&#x27;</span>);</span></span></span><br><span class="line"><span class="javascript"><span class="xml">        <span class="keyword">if</span>(!canvas.getContext) <span class="keyword">return</span>;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">      <span class="keyword">var</span> ctx = canvas.getContext(<span class="string">&quot;2d&quot;</span>);</span></span></span><br><span class="line"><span class="javascript"><span class="xml">      <span class="comment">//开始代码</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">        </span></span></span><br><span class="line"><span class="javascript"><span class="xml">    &#125;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    draw();</span></span></span><br><span class="line"><span class="javascript"><span class="xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><h2 id="3-绘制形状">3. 绘制形状</h2><h3 id="3-1-栅格（grid）和坐标空间">3.1 栅格（grid）和坐标空间</h3><p>如下图所示，<code>canvas</code>元素默认被网格所覆盖。通常来说网格中的一个单元相当于<code>canvas</code>元素中的一像素。栅格的起点为左上角（坐标为（0,0））。所有元素的位置都相对于原点来定位。所以图中蓝色方形左上角的坐标为距离左边（X轴）x像素，距离上边（Y轴）y像素（坐标为（x,y））。</p><p><img src="https://mdn.mozillademos.org/files/224/Canvas_default_grid.png" alt="img"></p><h3 id="3-2-绘制矩形">3.2 绘制矩形</h3><p>canvas只支持一种原生的图形绘制，那就是矩形。所有其他图形都至少需要生成一种路径（path）。</p><p>canvas提供的三种绘制矩形的方法如下：</p><ol><li><code>fillRect(x, y, width, height)</code>绘制一个填充的矩形</li><li><code>strokeRect(x, y, width, height)</code>绘制一个矩形的边框</li><li><code>clearRect(x, y, width, height)</code>清除指定的矩形区域</li></ol><p>这三个方法的参数是相同的，<code>x, y</code>就是矩形的左上角坐标（相对于canvas的坐标原点）。width，和height分别是绘制矩形的宽和高。</p><h2 id="4-绘制路径">4. 绘制路径</h2><p>图形的基本元素是路径，路径是通过不同颜色和宽度的线段或曲线相连形成的不同形状的点的集合。使用路径绘制图形的步骤：</p><blockquote>    1. 创建路径起始点<br>    2. 调用绘制方法绘制出路径<br>    3. 把路径封闭<br>    4. 一旦路径生成，通过描边或者填充路径区域来渲染图形<br></blockquote><p>需要用到的方法有：</p><blockquote>    1. beginPath() 新建一条路径，路径创建成功后，图形绘制命令被指向路径上<br>    2. moveTo(x, y) 把画笔移动到指定坐标，相当于设置路径起始点<br>    3. closePath() 闭合路径之后，图形绘制命令重新指向上下文<br>    4. stroke() 通过线条绘制图形轮廓<br>    5. fill() 通过填充路径的区域生成实心图像<br></blockquote><h3 id="4-1-绘制三角形">4.1 绘制三角形</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">draw</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">            <span class="keyword">var</span> canvas = <span class="built_in">document</span>.getElementById(<span class="string">&#x27;canvas&#x27;</span>);</span><br><span class="line">            <span class="keyword">if</span> (!canvas.getContext) <span class="keyword">return</span>;</span><br><span class="line">            <span class="keyword">var</span> ctx = canvas.getContext(<span class="string">&quot;2d&quot;</span>);</span><br><span class="line">            <span class="comment">//新建路径</span></span><br><span class="line">            ctx.beginPath();</span><br><span class="line">            <span class="comment">//将画笔移动到指定坐标</span></span><br><span class="line">            ctx.moveTo(<span class="number">50</span>, <span class="number">50</span>);</span><br><span class="line">            <span class="comment">//绘制线段</span></span><br><span class="line">            ctx.lineTo(<span class="number">200</span>, <span class="number">50</span>);  </span><br><span class="line">            ctx.lineTo(<span class="number">200</span>, <span class="number">200</span>);</span><br><span class="line">            <span class="comment">//闭合路径（连接起始点与终点）</span></span><br><span class="line">            ctx.closePath();</span><br><span class="line">            <span class="comment">//fill方法填充空白区域，且会在路径未闭合时将其闭合</span></span><br><span class="line">            ctx.fill()</span><br><span class="line">            ctx.stroke(); <span class="comment">//绘制路径。</span></span><br><span class="line">        &#125;</span><br><span class="line">draw();</span><br></pre></td></tr></table></figure><h3 id="4-2-绘制圆弧">4.2 绘制圆弧</h3><p>绘制圆弧的两个方法：</p><blockquote>    1. arc(x, y, r, startAngle, endAngle, anticlockwise) 以（x, y）为圆心，r为半径，从startAngle弧度开始到endAngle弧度结束。anticlosewise是布尔值，true表示逆时针，false表示顺时针。（默认为顺时针）<br>    2. arcTo(x1, y1, x2, y2, radius) 根据给定的控制点和半径画一段圆弧，最后再以直线连接两个点。</blockquote><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">draw</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">            <span class="keyword">var</span> canvas = <span class="built_in">document</span>.getElementById(<span class="string">&#x27;canvas&#x27;</span>);</span><br><span class="line">            <span class="keyword">if</span> (!canvas.getContext) <span class="keyword">return</span>;</span><br><span class="line">            <span class="keyword">var</span> ctx = canvas.getContext(<span class="string">&quot;2d&quot;</span>);</span><br><span class="line">            ctx.beginPath()</span><br><span class="line">            ctx.arc(<span class="number">50</span>, <span class="number">50</span>, <span class="number">50</span>, <span class="number">0</span>, <span class="built_in">Math</span>.PI / <span class="number">2</span>, <span class="literal">false</span>)</span><br><span class="line">            ctx.stroke()</span><br><span class="line"></span><br><span class="line">            ctx.beginPath()</span><br><span class="line">            ctx.arc(<span class="number">150</span>, <span class="number">50</span>, <span class="number">40</span>, <span class="number">0</span>, -<span class="built_in">Math</span>.PI / <span class="number">2</span>, <span class="literal">true</span>)</span><br><span class="line">            ctx.closePath()</span><br><span class="line">            ctx.stroke()</span><br><span class="line"></span><br><span class="line">            ctx.beginPath()</span><br><span class="line">            ctx.arc(<span class="number">50</span>, <span class="number">150</span>, <span class="number">40</span>, -<span class="built_in">Math</span>.PI / <span class="number">2</span>, <span class="built_in">Math</span>.PI / <span class="number">2</span>, <span class="literal">false</span>)</span><br><span class="line">            ctx.fill()</span><br><span class="line"></span><br><span class="line">            ctx.beginPath()</span><br><span class="line">            ctx.arc(<span class="number">150</span>, <span class="number">150</span>, <span class="number">40</span>, <span class="number">0</span>, <span class="built_in">Math</span>.PI, <span class="literal">false</span>)</span><br><span class="line">            ctx.fill()</span><br><span class="line">        &#125;</span><br><span class="line">        draw();</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">draw</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">var</span> canvas = <span class="built_in">document</span>.getElementById(<span class="string">&#x27;canvas&#x27;</span>);</span><br><span class="line">        <span class="keyword">if</span> (!canvas.getContext) <span class="keyword">return</span>;</span><br><span class="line">        <span class="keyword">var</span> ctx = canvas.getContext(<span class="string">&quot;2d&quot;</span>);</span><br><span class="line">        ctx.beginPath();</span><br><span class="line">        ctx.moveTo(<span class="number">50</span>, <span class="number">50</span>);</span><br><span class="line">        <span class="comment">//参数1、2：控制点1坐标   参数3、4：控制点2坐标  参数4：圆弧半径</span></span><br><span class="line">        ctx.arcTo(<span class="number">200</span>, <span class="number">50</span>, <span class="number">200</span>, <span class="number">200</span>, <span class="number">100</span>);</span><br><span class="line">        ctx.lineTo(<span class="number">200</span>, <span class="number">200</span>)</span><br><span class="line">ctx.closePath()</span><br><span class="line">        ctx.stroke();</span><br><span class="line">    &#125;</span><br><span class="line">    draw();</span><br></pre></td></tr></table></figure><h3 id="4-3-绘制贝塞尔曲线">4.3 绘制贝塞尔曲线</h3><p>什么是贝塞尔曲线？</p><p>贝塞尔曲线(Bézier curve)，又称贝兹曲线或贝济埃曲线，是应用于二维图形应用程序的数学曲线。</p><p>一般的矢量图形软件通过它来精确画出曲线，贝兹曲线由线段与节点组成，节点是可拖动的支点，线段像可伸缩的皮筋，我们在绘图工具上看到的钢笔工具就是来做这种矢量曲线的。</p><p>贝塞尔曲线是计算机图形学中相当重要的参数曲线，在一些比较成熟的位图软件中也有贝塞尔曲线工具如PhotoShop等。在Flash4中还没有完整的曲线工具，而在Flash5里面已经提供出贝塞尔曲线工具。</p><p>贝塞尔曲线于1962，由法国工程师皮埃尔·贝塞尔（Pierre Bézier）所广泛发表，他运用贝塞尔曲线来为汽车的主体进行设计。贝塞尔曲线最初由Paul de Casteljau于1959年运用de Casteljau演算法开发，以稳定数值的方法求出贝兹曲线。</p><h4 id="一次贝塞尔曲线-线性贝塞尔曲线">一次贝塞尔曲线(线性贝塞尔曲线)</h4><p><img src="http://lizhenchao.oss-cn-shenzhen.aliyuncs.com/imgs/17-6-4/40655077.jpg" alt="img"></p><h4 id="二次贝塞尔曲线">二次贝塞尔曲线</h4><p><img src="http://lizhenchao.oss-cn-shenzhen.aliyuncs.com/imgs/17-6-4/94917354.jpg" alt="img"></p><p><img src="http://lizhenchao.oss-cn-shenzhen.aliyuncs.com/imgs/17-6-4/35792129.jpg" alt="img"></p><h4 id="三次贝塞尔曲线">三次贝塞尔曲线</h4><p><img src="http://lizhenchao.oss-cn-shenzhen.aliyuncs.com/imgs/17-6-4/69159470.jpg" alt="img"></p><p><img src="http://lizhenchao.oss-cn-shenzhen.aliyuncs.com/imgs/17-6-4/55999388.jpg" alt="img"></p><p><strong>绘制二次贝塞尔曲线</strong></p><p><code>quadraticCurveTo(cplx, cply, x, y)</code></p><p>控制点坐标P1（cplx, cply）结束点坐标P2（x, y）</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">draw</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> canvas = <span class="built_in">document</span>.getElementById(<span class="string">&#x27;tutorial&#x27;</span>);</span><br><span class="line">    <span class="keyword">if</span> (!canvas.getContext) <span class="keyword">return</span>;</span><br><span class="line">    <span class="keyword">var</span> ctx = canvas.getContext(<span class="string">&quot;2d&quot;</span>);</span><br><span class="line">    ctx.beginPath();</span><br><span class="line">    ctx.moveTo(<span class="number">10</span>, <span class="number">200</span>); <span class="comment">//起始点</span></span><br><span class="line">    <span class="keyword">var</span> cp1x = <span class="number">40</span>, cp1y = <span class="number">100</span>;  <span class="comment">//控制点</span></span><br><span class="line">    <span class="keyword">var</span> x = <span class="number">200</span>, y = <span class="number">200</span>; <span class="comment">// 结束点</span></span><br><span class="line">    <span class="comment">//绘制二次贝塞尔曲线</span></span><br><span class="line">    ctx.quadraticCurveTo(cp1x, cp1y, x, y);</span><br><span class="line">    ctx.stroke();</span><br><span class="line">    </span><br><span class="line">    ctx.beginPath();</span><br><span class="line">    ctx.rect(<span class="number">10</span>, <span class="number">200</span>, <span class="number">10</span>, <span class="number">10</span>);</span><br><span class="line">    ctx.rect(cp1x, cp1y, <span class="number">10</span>, <span class="number">10</span>);</span><br><span class="line">    ctx.rect(x, y, <span class="number">10</span>, <span class="number">10</span>);</span><br><span class="line">    ctx.fill();</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line">draw();</span><br></pre></td></tr></table></figure><p><strong>绘制三次贝塞尔曲线</strong></p><p><code>bezierCurveTo(cp1x, cp1y, cp2x, cp2y, x, y)</code></p><p>控制点坐标P1（cp1x, cp1y）控制点坐标P2（cp2x, cp2y）结束点P3（x, y）</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">draw</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> canvas = <span class="built_in">document</span>.getElementById(<span class="string">&#x27;tutorial&#x27;</span>);</span><br><span class="line">    <span class="keyword">if</span> (!canvas.getContext) <span class="keyword">return</span>;</span><br><span class="line">    <span class="keyword">var</span> ctx = canvas.getContext(<span class="string">&quot;2d&quot;</span>);</span><br><span class="line">    ctx.beginPath();</span><br><span class="line">    ctx.moveTo(<span class="number">40</span>, <span class="number">200</span>); <span class="comment">//起始点</span></span><br><span class="line">    <span class="keyword">var</span> cp1x = <span class="number">20</span>, cp1y = <span class="number">100</span>;  <span class="comment">//控制点1</span></span><br><span class="line">    <span class="keyword">var</span> cp2x = <span class="number">100</span>, cp2y = <span class="number">120</span>;  <span class="comment">//控制点2</span></span><br><span class="line">    <span class="keyword">var</span> x = <span class="number">200</span>, y = <span class="number">200</span>; <span class="comment">// 结束点</span></span><br><span class="line">    <span class="comment">//绘制二次贝塞尔曲线</span></span><br><span class="line">    ctx.bezierCurveTo(cp1x, cp1y, cp2x, cp2y, x, y);</span><br><span class="line">    ctx.stroke();</span><br><span class="line"></span><br><span class="line">    ctx.beginPath();</span><br><span class="line">    ctx.rect(<span class="number">40</span>, <span class="number">200</span>, <span class="number">10</span>, <span class="number">10</span>);</span><br><span class="line">    ctx.rect(cp1x, cp1y, <span class="number">10</span>, <span class="number">10</span>);</span><br><span class="line">    ctx.rect(cp2x, cp2y, <span class="number">10</span>, <span class="number">10</span>);</span><br><span class="line">    ctx.rect(x, y, <span class="number">10</span>, <span class="number">10</span>);</span><br><span class="line">    ctx.fill();</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">draw();</span><br></pre></td></tr></table></figure><h2 id="5-添加样式和颜色">5. 添加样式和颜色</h2><p>给图形上色需要用到如下两个属性：</p><ul><li>fillStyle = color</li><li>strokeStyle = color</li></ul><blockquote>    1. color可以是表示css颜色值的字符串、渐变图案或者图案对象。<br>    2. 默认情况下，线条和填充颜色都是黑色。<br>    3. 一旦设置了fillStyle和strokeStyle的值，那么这个值就会成为新的默认值。</blockquote><p><strong>Transparency（透明度）</strong></p><p><code>globalAlpha = transparencyValue</code></p><p>这个属性影响到canvas里的所有图形的透明度，有效值的范围是0（完全透明）到1.0（完全不透明），默认是1.0。</p><p><strong>lineWidth（线宽）</strong></p><p>只能是正值，默认为1.0。以起始点和终点连线为中心，上下各占线宽的一半。</p><p><strong>lineCap（线条末端样式）</strong></p><p>共有三个值：</p><ul><li>butt：线段末端以方形结束</li><li>round：线段末端以圆形结束</li><li>square：线段末端以方形结束，但是增加一个宽度和线段相同，高度是线段宽度一半的矩形区域。</li></ul><p><strong>lineJoin（同一Path内线条结合处样式）</strong></p><p>共有三个值：</p><ul><li><p>round：圆角连接</p></li><li><p>bevel：平角连接</p></li><li><p>miter（默认）：直接延伸，交于一点</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">draw</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> canvas = <span class="built_in">document</span>.getElementById(<span class="string">&#x27;tutorial&#x27;</span>);</span><br><span class="line">    <span class="keyword">if</span> (!canvas.getContext) <span class="keyword">return</span>;</span><br><span class="line">    <span class="keyword">var</span> ctx = canvas.getContext(<span class="string">&quot;2d&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> lineJoin = [<span class="string">&#x27;round&#x27;</span>, <span class="string">&#x27;bevel&#x27;</span>, <span class="string">&#x27;miter&#x27;</span>];</span><br><span class="line">    ctx.lineWidth = <span class="number">20</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; lineJoin.length; i++)&#123;</span><br><span class="line">        ctx.lineJoin = lineJoin[i];</span><br><span class="line">        ctx.beginPath();</span><br><span class="line">        ctx.moveTo(<span class="number">50</span>, <span class="number">50</span> + i * <span class="number">50</span>);</span><br><span class="line">        ctx.lineTo(<span class="number">100</span>, <span class="number">100</span> + i * <span class="number">50</span>);</span><br><span class="line">        ctx.lineTo(<span class="number">150</span>, <span class="number">50</span> + i * <span class="number">50</span>);</span><br><span class="line">        ctx.lineTo(<span class="number">200</span>, <span class="number">100</span> + i * <span class="number">50</span>);</span><br><span class="line">        ctx.lineTo(<span class="number">250</span>, <span class="number">50</span> + i * <span class="number">50</span>);</span><br><span class="line">        ctx.stroke();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">draw();</span><br></pre></td></tr></table></figure></li></ul><p><strong>虚线</strong></p><p>用 <code>setLineDash</code> 方法和 <code>lineDashOffset</code> 属性来制定虚线样式. <code>setLineDash</code> 方法接受一个数组，来指定线段与间隙的交替；<code>lineDashOffset</code>属性设置起始偏移量。</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">draw</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> canvas = <span class="built_in">document</span>.getElementById(<span class="string">&#x27;tutorial&#x27;</span>);</span><br><span class="line">    <span class="keyword">if</span> (!canvas.getContext) <span class="keyword">return</span>;</span><br><span class="line">    <span class="keyword">var</span> ctx = canvas.getContext(<span class="string">&quot;2d&quot;</span>);</span><br><span class="line">    </span><br><span class="line">    ctx.setLineDash([<span class="number">20</span>, <span class="number">5</span>]);  <span class="comment">// [实线长度, 间隙长度]</span></span><br><span class="line">    ctx.lineDashOffset = -<span class="number">0</span>;</span><br><span class="line">    ctx.strokeRect(<span class="number">50</span>, <span class="number">50</span>, <span class="number">210</span>, <span class="number">210</span>);</span><br><span class="line">&#125;</span><br><span class="line">draw();</span><br></pre></td></tr></table></figure><h2 id="6-绘制文本">6. 绘制文本</h2><h3 id="6-1-绘制文本的两个方法">6.1 绘制文本的两个方法</h3><p>canvas提供了两种方法渲染文本：</p><ol><li><code>fillText(text, x, y, [maxWidth])</code>在指定的(x,y)位置填充指定的文本，绘制的最大宽度是可选的</li><li><code>strokeText(text, x, y, [maxWidth])</code>在指定的(x,y)位置绘制文本边框，绘制的最大宽度是可选的</li></ol><h3 id="6-2-给文本添加样式">6.2 给文本添加样式</h3><ol><li><code>font = value</code> 用法和css font属性相同，默认字体是<code>10 px sans-serif</code>。</li><li><code>textAlign = value</code>文本对齐选项，可选值包括<code>start, end, left, right 和 center</code>，默认值为<code>start</code>。</li><li><code>textBaseline = value</code>基线对齐选项，可选的值包括：<code>top</code>, <code>hanging</code>, <code>middle</code>, <code>alphabetic</code>, <code>ideographic</code>, <code>bottom</code>。默认值为 <code>alphabetic</code>。</li><li><code>direction = value</code>文本方向。可能的值包括：<code>ltr</code>, <code>rtl</code>, <code>inherit</code>。默认值为<code>inherit</code>。</li></ol><h2 id="7-状态的保存和恢复">7. 状态的保存和恢复</h2><p>此处相当于存在一个状态栈的概念，每次调用save()方法就把当前状态入栈，调用restore()方法时将上一个保存的状态出栈。这里的状态包括以下几种：</p><ul><li>当前应用的变形（即移动，旋转和缩放）</li><li>strokeStyle, fillStyle, globalAlpha, lineWidth, lineCap, lineJoin, miterLimit, shadowOffsetX, shadowOffsetY, shadowBlur, shadowColor, globalCompositeOperation 的值</li><li>当前的裁切路径（<code>clipping path</code>）</li></ul><h2 id="8-变形">8. 变形</h2><h3 id="8-1-translate-x-y">8.1 translate(x, y)</h3><p>用来移动canvas的原点到指定的位置，translate方法接受两个参数，水平偏移量x 和垂直偏移量y。</p><p>在做变形之前先保存状态是一个良好的习惯。大多数情况下，调用 <code>restore</code> 方法比手动恢复原先的状态要简单得多。又如果你是在一个循环中做位移但没有保存和恢复<code>canvas</code> 的状态，很可能到最后会发现怎么有些东西不见了，那是因为它很可能已经超出 <code>canvas</code> 范围以外了</p><p><strong>一定要注意translate移动的是canvas的坐标原点。</strong></p><h3 id="8-2-rotate-angle">8.2 rotate(angle)</h3><p>旋转坐标轴，这个方法只接受一个参数，旋转的角度angle，它是顺时针方向旋转的，以弧度为单位的值，旋转的中心是坐标原点。</p><h3 id="8-3-scale-x-y">8.3 scale(x, y)</h3><p>这个函数可以用来增减图形在canvas中的像素数目，对形状、位图进行缩小或者放大。scale方法的两个参数分别是横轴和纵轴的缩放因子，它们必须是正值。值比1.0小表示缩小，比1.0大表示放大。默认情况下，canvas的1单位就是1个像素</p><h3 id="8-4-transform-a-b-c-d-e-f">8.4 transform(a, b, c, d, e, f)</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> ctx;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">draw</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> canvas = <span class="built_in">document</span>.getElementById(<span class="string">&#x27;tutorial1&#x27;</span>);</span><br><span class="line">    <span class="keyword">if</span> (!canvas.getContext) <span class="keyword">return</span>;</span><br><span class="line">    <span class="keyword">var</span> ctx = canvas.getContext(<span class="string">&quot;2d&quot;</span>);</span><br><span class="line">    ctx.transform(<span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">    ctx.fillRect(<span class="number">0</span>, <span class="number">0</span>, <span class="number">100</span>, <span class="number">100</span>);</span><br><span class="line">&#125;</span><br><span class="line">draw();</span><br></pre></td></tr></table></figure><h2 id="9-合成">9. 合成</h2><p><strong>globalCompositeOperation</strong> 属性可以解决两个图形重叠时的行为。</p><p><code>globalCompositeOperation = type</code>,type的值可以是以下13中字符串值之一：</p><ol><li><code>soure-over(default)</code>默认设置，新图像会覆盖在原有图像之上。</li><li><code>source-in</code>仅显示新图像与原有图像的重叠部分。</li><li><code>source-out</code>仅显示新图像与原有图像未重叠部分。</li><li><code>source-atop</code>显示原有图像及新图像与其重叠部分。</li><li><code>destination-over</code>新图像显示于原有图像下方。</li><li><code>destination-in</code>仅显示原有图像与新图像的重叠部分。</li><li><code>destination-out</code>仅显示原有图像与新图像未重叠部分。</li><li><code>destination-atop</code>显示新图像及原有图像与其重叠部分。</li><li><code>lighter</code>对重叠区域的颜色做加处理。</li><li><code>darken</code>保留重叠部分最黑的像素。（每个颜色位进行比较，得到最小的）</li><li><code>lighten</code>保留重叠部分最亮的像素。（每个颜色位进行比较，得到最大的）</li><li><code>xor</code>重叠部分被清除。</li><li><code>copy</code>新图像被保留，其余全部清除。</li></ol><h2 id="10-剪裁路径">10. 剪裁路径</h2><p><code>clip()</code>方法可以将已经创建的路径转换成剪裁路径。剪裁路径的作用是遮罩，只显示剪裁路径内的区域，以外的区域会被隐藏。</p><p><strong>clip()方法只能遮罩在这个方法调用之后绘制的图像，如果是在调用之前就绘制的图像，就无法实现遮罩。</strong></p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> ctx;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">draw</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> canvas = <span class="built_in">document</span>.getElementById(<span class="string">&#x27;tutorial1&#x27;</span>);</span><br><span class="line">    <span class="keyword">if</span> (!canvas.getContext) <span class="keyword">return</span>;</span><br><span class="line">    <span class="keyword">var</span> ctx = canvas.getContext(<span class="string">&quot;2d&quot;</span>);</span><br><span class="line"></span><br><span class="line">    ctx.beginPath();</span><br><span class="line">    ctx.arc(<span class="number">20</span>,<span class="number">20</span>, <span class="number">100</span>, <span class="number">0</span>, <span class="built_in">Math</span>.PI * <span class="number">2</span>);</span><br><span class="line">    ctx.clip();</span><br><span class="line">    </span><br><span class="line">    ctx.fillStyle = <span class="string">&quot;pink&quot;</span>;</span><br><span class="line">    ctx.fillRect(<span class="number">20</span>, <span class="number">20</span>, <span class="number">100</span>,<span class="number">100</span>);</span><br><span class="line">&#125;</span><br><span class="line">draw();</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
            <tag> HTML5 </tag>
            
            <tag> canvas </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java多线程编程（一）</title>
      <link href="/2021/10/15/Java%E5%A4%9A%E7%BA%BF%E7%A8%8B%E7%BC%96%E7%A8%8B%E4%B8%80/"/>
      <url>/2021/10/15/Java%E5%A4%9A%E7%BA%BF%E7%A8%8B%E7%BC%96%E7%A8%8B%E4%B8%80/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\css\APlayer.min.css"><script src="\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\js\Meting.min.js"></script><h1>第一章 Java多线程技能</h1><h1>前言</h1><p>作为多线程编程的第一章，主要介绍Thread类的核心方法</p><blockquote>线程如何启动<br>如何使线程暂停<br>线程的优先级<br>线程安全相关问题<br></blockquote><h1>一、进程和多线程概述</h1><p><a href="https://baike.baidu.com/item/%E8%BF%9B%E7%A8%8B/382503?fr=aladdin">进程</a>是受操作系统管理的基本运行单元。<br><br>程序是指令序列，这些指令可以让CPU完成指定的任务。.java程序经编译后形成.class文件，在Windows中启动一个JVM虚拟机相当于创建了一个进程，在虚拟机中加载class文件并运行，在class文件中通过执行创建新线程的代码来执行具体的任务。测试用代码如下：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test1</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Thread.sleep(Integer.MAX_VALUE);</span><br><span class="line">        &#125;   <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Test1类在重复运行3次后，可以在任务管理器的进程列表中看到创建了3个javaw.exe进程，说明每执行一次main()方法就创建一个进程，其本质就是JVM虚拟机进程。</p><p><a href="https://baike.baidu.com/item/%E7%BA%BF%E7%A8%8B/103101?fr=aladdin">线程</a>可以理解为在进程中独立运行的子任务。</p><p>使用多线程有什么优点？可以大幅利用CPU的空闲时间来处理其他任务，使用多线程技术可以在同一时间执行更多不同的任务。</p><p><strong>在什么场景下使用多线程技术？</strong></p><blockquote>1） 阻塞。一旦系统中出现了阻塞现象，则可以根据实际情况来使用多线程技术提高运行效率。<br>2）依赖。业务分为两个执行过程，分别是A和B。当A业务发生阻塞情况时，B业务的执行不依赖与A业务的执行结果，这时可以使用多线程技术来提高运行效率；如果B业务的执行依赖A业务的运行结果，则可以不适用多线程技术，按顺序进行业务的执行。</blockquote><h1>二、使用多线程</h1><p>实现多线程编程主要有两种方式：一种是继承Thread类，另一种是实现Runnable接口。</p><h2 id="1-继承Thread类">1.继承Thread类</h2><p>Thread类的声明结构：<code>public class Thread implements Runnable</code><br>从上面的源代码中可以发现，Thread实现了Runnable接口，它们之间具有多态关系，多态结构的示例代码如下:</p><p><code>Runnable run1 = new Thread();</code></p><p><code>Runnable run2 = new MyThread();</code></p><p><code>Thread t1 = new MyThread();</code></p><p><strong>使用Thread类的方式创建新线程时，最大的局限是不支持多继承，因为Java语言的特点是单根继承，所以为了支持多继承，完全可以实现Runnable接口。</strong></p><p>创建一个自定义的线程类MyThread.java，此类继承自Thread，并且重写run()方法。在run()方法中添加新线程要执行的代码如下：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> mythread;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyThread</span> <span class="keyword">extends</span> <span class="title">Thread</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.run();</span><br><span class="line">        System.out.println(<span class="string">&quot;MyThread&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行类代码如下：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> mythread.MyThread;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Run</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        MyThread myThread = <span class="keyword">new</span> MyThread();</span><br><span class="line">        myThread.start();<span class="comment">//耗时大</span></span><br><span class="line">        System.out.println(<span class="string">&quot;运行结束！&quot;</span>);<span class="comment">//耗时小</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面代码使用start()方法启动一个线程，线程启动后会自动调用线程对象中的run()方法，run()方法中的代码就是线程对象要执行的任务，是线程任务的入口。<br>start()方法耗时的原因是执行了多个步骤，具体如下：</p><blockquote>1）通过JVM告诉操作系统创建Thread<br>2）操作系统开辟内存并使用Windows SDK中的creatThread()函数创建Thread线程对象。<br>3）操作系统对Thread对象进行调度，以确定执行时机。<br>4）Thread在操作系统中被成功执行。</blockquote><p>在使用多线程技术时代码的运行结果与代码的执行顺序和调用顺序是无关的。另外，线程是一个子任务，CPU以不确定的方式，或者说是以随机的时间来调用线程中的run()方法。</p><h2 id="2-线程随机性的展现">2.线程随机性的展现</h2><p>创建自定义线程类MyThread.java的代码如下：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> mythread;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyThread</span> <span class="keyword">extends</span> <span class="title">Thread</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10000</span>; i++) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;run=&quot;</span> + Thread.currentThread().getName());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>再创建运行类Test.java代码：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> mythread.MyThread;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        MyThread thread = <span class="keyword">new</span> MyThread();</span><br><span class="line">        thread.setName(<span class="string">&quot;myThread&quot;</span>);</span><br><span class="line">        thread.start();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10000</span>; i++) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;main=&quot;</span> + Thread.currentThread().getName());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Thread.java中的start()方法通知“线程规划器”——此线程已经准备就绪，准备调用线程对象的run()方法。如果调用thread.run()方法，而不是thread.start()方法，其实就不是异步执行了，而是同步进行。<br>多线程随机输出的原因是CPU将时间片分给不同的线程，线程获得时间片后就执行任务。时间片即CPU分配给各个程序的时间。每个线程被分配一个时间片，在当前的时间片内CPU去执行线程中的任务。<strong>CPU在不同的线程进行切换是需要耗时的，所以并不是创建的线程越多，运行效率就越高。</strong></p><h2 id="3-实现Runnable接口">3.实现Runnable接口</h2><p>如果想创建的线程类已经有一个父类了，就不能再继承Thread类，所以需要实现Runnable接口来解决这样的情况。<br>创建一个实现Runnable接口的MyRunnable类，代码如下：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> myrunnable;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyRunnable</span> <span class="keyword">implements</span> <span class="title">Runnable</span></span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;运行中！&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行类代码如下：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> myrunnable.MyRunnable;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Run</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Runnable runnable = <span class="keyword">new</span> MyRunnable();</span><br><span class="line">        Thread thread = <span class="keyword">new</span> Thread(runnable);</span><br><span class="line">        thread.start();</span><br><span class="line">        System.out.println(<span class="string">&quot;运行结束！&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="4-使用Runnable接口实现多线程的优点">4.使用Runnable接口实现多线程的优点</h2><p>首先创建业务A类：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> service;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AServer</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">a_save_method</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;a中的保存数据方法被执行&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>再创建业务B类：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> service;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BServer</span> <span class="keyword">extends</span> <span class="title">AServer</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">a_save_method</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;b中的保存数据方法被执行&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">b_save_method();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>通过实现Runnable接口，可间接地实现“多继承”的效果。在非多继承的情况下，使用继承Thread类和实现Runnable接口两种方式在去的程序运行的结果上没什么太大区别，一旦出现“多继承”的情况，则采用实现Runnable接口的方式来处理多线程问题是很必要的。</p><h2 id="5-实例变量共享造成的非线程安全问题与解决方案">5.实例变量共享造成的非线程安全问题与解决方案</h2><p>自定义线程类中的实例变量针对其他线程可以有共享和不共享之分，在多个线程之间交互时是很重要的技术点。</p><h3 id="不共享数据的情况">不共享数据的情况</h3><p>每个线程都有各自的变量，各自控制自己的变量，变量不共享，不存在多个线程访问同一个变量的问题。</p><h3 id="共享数据的情况">共享数据的情况</h3><p>共享数据的情况就是多个线程可以访问同一个变量，不同线程可能同时对一个变量进行处理，就会产生“非线程安全问题”。可以通过在run()方法前加入<strong>synchronized</strong>关键字，使多个线程在执行run()方法时，以排队的方式进行处理。<strong>synchronized</strong>关键字可以对任意对象及方法加锁，而加锁的代码被称为“互斥区”或“临界区”。<br>当一个线程想要执行同步方法里面的代码时，就会首先尝试申请这把锁，如果申请到这把锁，则执行互斥区代码；若申请不到，就会一直申请这把锁，直到申请到为止，而且多个线程会争抢这把锁。</p><h2 id="6-Servlet技术造成的非线程安全问题与解决方案">6.Servlet技术造成的非线程安全问题与解决方案</h2><p>非线程安全问题主要是指多个线程对同一个对象中的同一个实例变量进行操作时会出现值被更改，值不同步的情况，影响程序执行流程。示例如下：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LoginServlet</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> String usernameRef;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> String passwordRef;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">doPost</span><span class="params">(String username, String password)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            usernameRef = username;</span><br><span class="line">            <span class="keyword">if</span> (username.equals(<span class="string">&quot;a&quot;</span>)) &#123;</span><br><span class="line">                Thread.sleep(<span class="number">5000</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            passwordRef = password;</span><br><span class="line"></span><br><span class="line">            System.out.println(<span class="string">&quot;username=&quot;</span> + usernameRef + <span class="string">&quot; password=&quot;</span> + password);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            <span class="comment">// TODO Auto-generated catch block</span></span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">运行结果1：</span></span><br><span class="line"><span class="comment">b bb</span></span><br><span class="line"><span class="comment">a aa</span></span><br><span class="line"><span class="comment">运行结果2:</span></span><br><span class="line"><span class="comment">a bb</span></span><br><span class="line"><span class="comment">a aa</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><p>线程ALogin.java代码如下：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> extthread;</span><br><span class="line"><span class="keyword">import</span> controller.LoginServlet;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ALogin</span> <span class="keyword">extends</span> <span class="title">Thread</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        LoginServlet.doPost(<span class="string">&quot;a&quot;</span>, <span class="string">&quot;aa&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>线程BLogin.java代码如下：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> extthread;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> controller.LoginServlet;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BLogin</span> <span class="keyword">extends</span> <span class="title">Thread</span></span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        LoginServlet.doPost(<span class="string">&quot;b&quot;</span>, <span class="string">&quot;bb&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>运行类Run.java代码如下：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> extthread.ALogin;</span><br><span class="line"><span class="keyword">import</span> extthread.BLogin;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Run</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        ALogin a = <span class="keyword">new</span> ALogin();</span><br><span class="line">        a.start();</span><br><span class="line">        BLogin b = <span class="keyword">new</span> BLogin();</span><br><span class="line">        b.start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>解决如上“非线程安全”问题同样可以使用<strong>synchronized</strong>关键字，更改代码如下：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LoginServlet</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> String usernameRef;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> String passwordRef;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">synchronized</span> <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">doPost</span><span class="params">(String username, String password)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            usernameRef = username;</span><br><span class="line">            <span class="keyword">if</span> (username.equals(<span class="string">&quot;a&quot;</span>)) &#123;</span><br><span class="line">                Thread.sleep(<span class="number">5000</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            passwordRef = password;</span><br><span class="line"></span><br><span class="line">            System.out.println(<span class="string">&quot;username=&quot;</span> + usernameRef + <span class="string">&quot; password=&quot;</span> + password);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            <span class="comment">// TODO Auto-generated catch block</span></span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">输出结果：</span></span><br><span class="line"><span class="comment">a aa</span></span><br><span class="line"><span class="comment">b bb</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><h1>currentThread()方法</h1><p><code>currentThread()</code>方法可返回代码段正在被哪个线程调用。<br>创建MyThread类，代码如下：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> mythread;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyThread</span> <span class="keyword">extends</span> <span class="title">Thread</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MyThread</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;构造方法的打印：&quot;</span> + Thread.currentThread().getName());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;run方法的打印：&quot;</span> + Thread.currentThread().getName());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>运行类代码如下：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> run;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> mythread.MyThread;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Run</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        MyThread myThread = <span class="keyword">new</span> MyThread();</span><br><span class="line">        myThread.start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">构造方法的打印： main</span></span><br><span class="line"><span class="comment">run方法的打印： Thread—0</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><p>MyThread.java类的构造函数是被main线程调用的，而run方法是被Thread-0线程调用的，run()方法是自动调用的方法。<br>更改代码如下：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> run;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> mythread.MyThread;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Run</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        MyThread myThread = <span class="keyword">new</span> MyThread();</span><br><span class="line">        <span class="comment">//myThread.start();</span></span><br><span class="line">        myThread.run();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">构造方法的打印： main</span></span><br><span class="line"><span class="comment">run方法的打印： main</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><p>执行方法run()和start()的区别</p><blockquote>1）my.run();：立即执行run()方法，不启动新的线程。<br>2）my.start();：执行run()的时机不确定，启动新的线程</blockquote><h1>isAlive方法</h1><p><code>isAlive()</code>方法的功能是判断当前的线程是否存活.<br>测试代码如下：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> mythread;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyThread</span> <span class="keyword">extends</span> <span class="title">Thread</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;run==&quot;</span> + <span class="keyword">this</span>.isAlive());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> run;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> mythread.MyThread;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Run</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        MyThread myThread = <span class="keyword">new</span> MyThread();</span><br><span class="line">        System.out.println(<span class="string">&quot;begin==&quot;</span> + myThread.isAlive());</span><br><span class="line">        myThread.start();</span><br><span class="line">        System.out.println(<span class="string">&quot;end==&quot;</span> + myThread.isAlive());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">begin==false</span></span><br><span class="line"><span class="comment">end==true</span></span><br><span class="line"><span class="comment">run==true</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><p>isAlive()方法的作用是测试线程是否处于活动状态。线程已经启动且尚未终止的状态即活动状态。如果线程处于正在运行或准备开始运行的状态，就认为线程是“存活”的。对于代码：<br>System.out.println(“end==” + myThread.isAlive());<br>虽然其输出的值是true，但此值是不确定的，因为此时myThread线程还未执行完毕，如果将代码更改如下：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> run;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> mythread.MyThread;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Run</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">        MyThread myThread = <span class="keyword">new</span> MyThread();</span><br><span class="line">        System.out.println(<span class="string">&quot;begin==&quot;</span> + myThread.isAlive());</span><br><span class="line">        myThread.start();</span><br><span class="line">        Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;end==&quot;</span> + myThread.isAlive());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><font color=999AAA >则代码System.out.println(“end==” + myThread.isAlive());<br>输出结果为false，因为myThread对象已经在1s之内执行完毕。</p><h1>sleep(long millis)方法</h1><p>sleep方法的使用是在指定的时间（毫秒）内让当前“正在执行的线程”休眠（暂停执行），这个“正在执行的线程”是指this.currentThread()返回的线程。<br>示例代码，类Mythread.java代码：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> mythread;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyThread</span> <span class="keyword">extends</span> <span class="title">Thread</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;run threadName=&quot;</span></span><br><span class="line">                    + <span class="keyword">this</span>.currentThread().getName() + <span class="string">&quot; begin=&quot;</span></span><br><span class="line">                    + System.currentTimeMillis());</span><br><span class="line">            Thread.sleep(<span class="number">2000</span>);</span><br><span class="line">            System.out.println(<span class="string">&quot;run threadName=&quot;</span></span><br><span class="line">                    + <span class="keyword">this</span>.currentThread().getName() + <span class="string">&quot; end=&quot;</span></span><br><span class="line">                    + System.currentTimeMillis());</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            <span class="comment">// TODO Auto-generated catch block</span></span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行类Run1.java代码如下：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> run;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> mythread.MyThread;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Run1</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        MyThread myThread = <span class="keyword">new</span> MyThread();</span><br><span class="line">        System.out.println(<span class="string">&quot;begin=&quot;</span> + System.currentTimeMillis());</span><br><span class="line">        myThread.run();</span><br><span class="line">        System.out.println(<span class="string">&quot;end=&quot;</span> + System.currentTimeMillis());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">begin=1604938554575</span></span><br><span class="line"><span class="comment">run threadName=main begin=1604938554582</span></span><br><span class="line"><span class="comment">run threadName=main end=1604938556589</span></span><br><span class="line"><span class="comment">end=1604938556589</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><p>运行类Run2.java代码如下：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> run;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> mythread.MyThread;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Run</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        MyThread myThread = <span class="keyword">new</span> MyThread();</span><br><span class="line">        System.out.println(<span class="string">&quot;begin=&quot;</span> + System.currentTimeMillis());</span><br><span class="line">        myThread.start();</span><br><span class="line">        System.out.println(<span class="string">&quot;end=&quot;</span> + System.currentTimeMillis());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">begin=1604938758015</span></span><br><span class="line"><span class="comment">end=1604938758021</span></span><br><span class="line"><span class="comment">run threadName=Thread-0 begin=1604938758021</span></span><br><span class="line"><span class="comment">run threadName=Thread-0 end=1604938760033</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><p>直接调用run()方法，main线程和MyThread线程同步执行。<br>使用start()方法启动线程，由于main线程与MyThread线程是异步执行的，所以首先输出的信息为begin和end，而MyThread线程是后执行的，在最后两行间隔了2s输出run…begin和run…end相关的信息。</p><h1>sleep(long millis, int nanos)方法</h1><p><code>sleep(long millis, int nanos)</code>方法的作用是在指定的毫秒数加指定的纳秒数内让当前正在运行的线程休眠（停止执行），此操作受到系统计时器和调度程序的精度和准确性的影响。</p><h1>StackTraceElement[] getStackTrace()方法</h1><p><code>StackTraceElement[] getStackTrace()</code>方法的作用是返回一个表示该线程堆栈跟踪元素的数组。如果该线程尚未启动或已经终止，则该方法返回一个零长度数组。如果返回的数组不是零长度的，则其第一个元素代表堆栈顶，它是该数组中最新的方法调用。最后一个元素代表堆栈底，是该数组中最旧的方法调用。</p><h1>static void dumpStack()方法</h1><p><code>static void dumpStack()</code>方法的作用的将当前线程的堆栈跟踪信息输出至标准错误流。该方法仅用于调试。</p><h1>getId()方法</h1><p><code>getId()</code>方法用于取得线程的唯一标识。</p><h1>三、停止线程</h1><p>停止一个线程意味着在线程处理完任务之前停止正在做的操作，也就是放弃当前的操作，必须做好防范措施，以便达到预期的效果。停止一个线程可以使用<code>Thread.stop()</code>方法，但是这个方法是不安全的，而且是被弃用的。<br>大多数情况下，停止一个线程使用Thread.interrupt()方法，但这个方法不会终止一个正在运行的线程，还需要加入一个判断才可以完成线程的停止。<br>在Java中有 3 种方法可以使正在运行的线程终止运行：</p><ol><li>使用退出标志使线程正常退出。</li><li><s>使用stop()方法强制终止线程。</s></li><li>使用interrupt()方法终止线程。</li></ol><h2 id="1-终止不了的线程">1. 终止不了的线程</h2><p>调用interrupt()方法仅仅是在当前线程中做了一个停止的标志，不是真正的停止线程。</p><h2 id="2-判断线程是否为停止状态">2. 判断线程是否为停止状态</h2><p>Thread.java 类提供了两个判断方法：</p><ol><li>public static boolean interrupted(): 测试currentThread() 是否已经中断。</li><li>public boolean this.isInterrupted(): 测试 this 关键字所在类的对象是否已经中断。</li></ol><h1>四、暂停线程</h1><p>暂停线程意味着此线程还可以恢复运行，可以使用suspend()方法暂停线程，使用resume()方法来恢复线程的执行。</p><h2 id="1-suspend-方法与resume-方法的缺点——独占">1. suspend()方法与resume()方法的缺点——独占</h2><p>如果suspend()与resume()方法使用不当，很容易造成公共同步对象被独占，其他线程无法访问公共同步对象的结果。若两个线程的run() 方法都调用了被synchronized 修饰的方法，A线程被暂停，则B线程即使启动也无法进入该方法。</p><h2 id="2-suspend-方法与resume-方法的缺点——数据不完整">2. suspend()方法与resume()方法的缺点——数据不完整</h2><p>线程暂停可能会导致数据不完整的情况，想要实现对线程的暂停与恢复处理，可使用wait()、notify()或notifyAll() 方法。</p><h1>四、yield()方法</h1><p>yield() 方法的作用是放弃当前的CPU资源，让其他任务去占用CPU执行时间，放弃的时间不确定，有可能刚刚放弃，马上又获得CPU时间片。</p><h1>五、线程的优先级</h1><p>在操作系统中，线程可以划分优先级，优先级较高的线程得到的CPU资源较多，也就是CPU优先执行优先级较高的线程对象中的任务，其实就是让高优先级的线程获得更多的CPU时间片。<br>设置线程优先级有助于“线程规划器”确定下一次选择哪一个线程来优先执行。设置线程优先级使用setPriority()方法。<br>在Java中，线程的优先级分为1~10共10个等级，如果优先级小于1或大于10，JDK会抛出异常 <code>throw new IllegalArgumentException()</code></p><h2 id="1-线程优先级的继承特性">1. 线程优先级的继承特性</h2><p>在Java中，线程的优先级具有继承性，例如A 线程启动B 线程，则B 线程的优先级与A 线程是一样的。</p><h2 id="2-优先级的规律性">2. 优先级的规律性</h2><p>当线程优先级的等级差距很大时，谁先被执行完和代码调用顺序无关。</p><h2 id="3-优先级的随机性">3. 优先级的随机性</h2><p>优先级高的线程并不一定每一次都先执行完run()方法中的任务，也就是线程优先级与输出顺序无关，这两者没有依赖关系，它们具有不确定性和随机性。</p><h2 id="4-优先级对线程运行速度的影响">4. 优先级对线程运行速度的影响</h2><p>优先级高的运行速度快。</p><h1>六、 守护线程</h1><p>Java中有两种线程，一种是用户线程，也称非守护线程；另一种是守护线程。<br>守护线程是一种特殊的线程，当进程中不存在非守护线程了，则守护线程自动销毁。典型的守护线程是垃圾回收线程，当进程中没有非守护线程了，则垃圾回收线程也没有存在的必要了，自动销毁。凡是调用setDaemon(true)代码并传入true 值的线程才是守护线程。要在start() 方法之前执行方法，否则会出现异常。</p><p>文章摘自《Java多线程编程核心技术》高洪岩 著</p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> 多线程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>九宫重排问题</title>
      <link href="/2021/10/15/%E7%AC%AC%E4%B8%80%E7%AF%87%E5%8D%9A%E5%AE%A2/"/>
      <url>/2021/10/15/%E7%AC%AC%E4%B8%80%E7%AF%87%E5%8D%9A%E5%AE%A2/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\css\APlayer.min.css"><script src="\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\js\Meting.min.js"></script><h2 id="数据结构声明">数据结构声明</h2><p>结构体 node_t 封装移动数据 其中 data为当前序列或称当前状态 step_p 为上一步位置</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node_t</span> &#123;</span></span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">char</span> data[<span class="number">9</span>];</span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">int</span>  step_p;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>阶乘表 用于康托展开时的计算</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">long</span> <span class="keyword">int</span> fac[<span class="number">10</span>] = &#123; <span class="number">1</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">6</span>,<span class="number">24</span>,<span class="number">120</span>,<span class="number">720</span>,<span class="number">5040</span>,<span class="number">40320</span>,<span class="number">362880</span> &#125;;</span><br></pre></td></tr></table></figure><p>结构体数组 用于存放移动数据</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node_t</span> <span class="title">save_step</span>[363880];</span> </span><br></pre></td></tr></table></figure><p>定义了四种移动方法</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">char</span> move[<span class="number">4</span>][<span class="number">2</span>] = &#123; &#123;<span class="number">-1</span>,<span class="number">0</span>&#125;,&#123;<span class="number">0</span>,<span class="number">1</span>&#125;,&#123;<span class="number">1</span>,<span class="number">0</span>&#125;,&#123;<span class="number">0</span>,<span class="number">-1</span>&#125; &#125;;</span><br></pre></td></tr></table></figure><h2 id="1、康托展开判重">1、康托展开判重</h2><h3 id="1-康托展开定义">1. 康托展开定义</h3><p><img src="https://private.codecogs.com/gif.latex?X%3Dan*%28n-1%29%21+an-1*%28n-2%29%21+...+ai*%28i-1%29%21+...+a2*1%21+a1*0%21" alt="X=an*(n-1)!+an-1*(n-2)!+...+ai*(i-1)!+...+a21!+a10!"></p><p>康托展开用于判断该数列在其全排列下的次序</p><p>九宫最多有 9！即 362880 种排列</p><h3 id="2-康托展开的应用">2. 康托展开的应用</h3><p>此处为康托展开的实现 返回值<code>num</code> 就是当前序列在全排列中的次序</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">kangtuozhankai</span><span class="params">(<span class="keyword">unsigned</span> <span class="keyword">char</span> s[], <span class="keyword">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i, j, temp, num;</span><br><span class="line">    num = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        temp = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (j = i + <span class="number">1</span>; j &lt; n; j++)</span><br><span class="line">            <span class="keyword">if</span> (s[j] &lt; s[i])  <span class="comment">//判断几个数小于它</span></span><br><span class="line">                temp++;</span><br><span class="line">        num += fac[n - i - <span class="number">1</span>] * temp;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> num;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="2、BFS-算法（核心）">2、BFS 算法（核心）</h2><p>BFS（breadth-first search），属于一种盲目搜寻法，目的是系统地展开并检查图中的所有节点，以找寻结果。换句话说，它并不考虑结果的可能位置，彻底地搜索整张图，直到找到结果为止。</p><p>算法的具体实现就是如下代码中的两重循环，从返回值可以看出这是一个递归函数，返回值就是移动步数，即递归深度。</p><p>先看内部循环做了哪些工作：</p><p>​共执行了四次循环，每次循环对应上、下、左和右四种移动，对移动的结果进行了处理。具体做法是调用的下文中提到的中间函数，该中间函数会返回一个整数，返回 0 表示此次移动非法（交换位置越界），返回 1 表示普通移动，返回 2 表示找到终点。</p><p><strong>重点理解start，end， next_end 的含义</strong></p><p>要理解这三个变量的含义，不妨从它们的变化入手，在算法开始前，全局变量 start 和 end 都被初始化为 0，算法开始时将 end 的值赋给 next_end，在循环中的每一次合法移动都将结果存入数组 <code>save_step[++next_end].data</code>，并把上一步的位置 start 赋值给 <code>save_step[++next_end].step_p</code>构造结果链，在算法最后，将 start 赋值为 end+1，end 赋值为 next_end。那么这些步骤完成了什么样的工作，或者说有什么作用呢？</p><p>我们知道，在 BFS 算法中需要使用栈来存放每一次的结果，而我们的代码中好像并没有使用栈这种数据结构。所以上述的步骤就是完成了这样的工作，start 可看做每次算法的栈顶，而 end 则是栈底。</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> start = <span class="number">0</span>, end = <span class="number">0</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">bfs</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> x, y;</span><br><span class="line">    <span class="keyword">int</span> next_end = end;           <span class="comment">//存放下次bfs的end标志位</span></span><br><span class="line">    <span class="keyword">int</span> err, i;</span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">char</span> temp[<span class="number">9</span>];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (; start &lt;= end; start++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; <span class="number">4</span>; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">memcpy</span>(temp, (<span class="keyword">unsigned</span> <span class="keyword">char</span>*)save_step[start].data, <span class="number">9</span>);</span><br><span class="line"></span><br><span class="line">            err = zero(i, temp);     <span class="comment">//处理数据里的0</span></span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (err)   <span class="comment">//保存数据</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="built_in">memcpy</span>((<span class="keyword">unsigned</span> <span class="keyword">char</span>*)save_step[++next_end].data, temp, <span class="number">9</span>);</span><br><span class="line"></span><br><span class="line">                save_step[next_end].step_p = start;     <span class="comment">//记录上次步数位置.      </span></span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> (err == <span class="number">2</span>)  <span class="comment">//找到终点</span></span><br><span class="line">                &#123;</span><br><span class="line">                    end_index = next_end;          <span class="comment">//记录终点步数位置.</span></span><br><span class="line">                    <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    start = end + <span class="number">1</span>;</span><br><span class="line">    end = next_end;</span><br><span class="line">    <span class="keyword">return</span> (<span class="number">1</span> + bfs());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="3、BFS-与康托展开的中间函数">3、BFS 与康托展开的中间函数</h2><p>零（空格）的移动</p><p><strong>重点理解 x，y 的含义</strong></p><p>此处的 x，y 实际上是将一维数组转换为二维表示，横轴为 x，纵轴为 y，可代入具体数据进行验证</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">zero</span><span class="params">(<span class="keyword">int</span> i, <span class="keyword">unsigned</span> <span class="keyword">char</span> data[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> x, y, temp, num;</span><br><span class="line">    <span class="keyword">int</span> j;</span><br><span class="line">    <span class="keyword">for</span> (j = <span class="number">0</span>; j &lt; <span class="number">9</span>; j++)</span><br><span class="line">        <span class="keyword">if</span> (data[j] == <span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line"></span><br><span class="line">            x = j % <span class="number">3</span> + move[i][<span class="number">0</span>];</span><br><span class="line">            y = j / <span class="number">3</span> + move[i][<span class="number">1</span>];</span><br><span class="line"></span><br><span class="line">            <span class="comment">/*判断交换位置是否越界*/</span></span><br><span class="line">            <span class="keyword">if</span> (x &lt; <span class="number">0</span> || x&gt;<span class="number">2</span>)</span><br><span class="line">                <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (y &lt; <span class="number">0</span> || y&gt;<span class="number">2</span>)</span><br><span class="line">                <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">            <span class="comment">/*判断交换后的位置是否已被走过*/</span></span><br><span class="line">            data[j] = data[x + y * <span class="number">3</span>];</span><br><span class="line">            data[x + y * <span class="number">3</span>] = <span class="number">0</span>;</span><br><span class="line">            num = kangtuozhankai(data, <span class="number">9</span>);</span><br><span class="line">            <span class="keyword">if</span> (step[num] == <span class="number">1</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (<span class="built_in">memcmp</span>(end_p, data, <span class="number">9</span>) == <span class="number">0</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="number">2</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            step[num] = <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="4、一些其他的函数">4、一些其他的函数</h2><h3 id="打印结果">打印结果</h3><p>利用 bfs 算法中构造的结果链可以很容易地完成</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">print</span><span class="params">(<span class="keyword">int</span> step_num)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;打印步数具体内容\n&quot;</span>);</span><br><span class="line">    <span class="keyword">for</span> (; step_num &gt;= <span class="number">0</span>; step_num--)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;****第%d步****\n&quot;</span>, step_num);</span><br><span class="line">        <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; <span class="number">3</span>; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;%d %d %d\n&quot;</span>, save_step[end_index].data[i * <span class="number">3</span>],</span><br><span class="line">                save_step[end_index].data[i * <span class="number">3</span> + <span class="number">1</span>],</span><br><span class="line">                save_step[end_index].data[i * <span class="number">3</span> + <span class="number">2</span>]);</span><br><span class="line">        &#125;</span><br><span class="line">        end_index = save_step[end_index].step_p;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="判断无解">判断无解</h3><p>在上面已经讨论过 bfs 是一种盲目搜寻法，找到结果的方式就是对整张图进行遍历，直至找到结果，那么如果九宫问题本身就是无解，那么花费的时间一定是很多的。针对这个问题如何解决？</p><p>引入对换、排列的奇偶性和逆序数的概念</p><p><strong>在排列中将任意两个元素对调，其余元素不动，这种作出新排列的手续叫做对换。</strong></p><p>已知定理：一个排列中任意两个元素对换，排列改变奇偶性</p><p>推论：奇排列调成标准排列的对换次数为奇数，偶排列调成标准排列的对换次数为偶数</p><p><strong>在一个排列中,如果一对数的前后位置与大小顺序相反,即前面的数大于后面的数,那么它们就称为一个逆序.一个排列中逆序的总数就称为这个排列的逆序数。</strong></p><p><strong>逆序数为偶数的排列称为偶排列；逆序数为奇数的排列称为奇排列.如2431中,21,43,41,31是逆序,逆序数是4,为偶排列。</strong></p><p>那么在我们的代码中，目标序列为 123456780 很显然是一个偶排列，所以可知有解的排列只能是进行偶数次对换的偶排列和奇数次对换的奇排列。</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">check1</span><span class="params">(<span class="keyword">unsigned</span> <span class="keyword">char</span> step[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i, j;</span><br><span class="line">    <span class="keyword">int</span> num = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; <span class="number">9</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span> (j = i; j &lt; <span class="number">9</span>; j++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (step[i] &gt; step[j])</span><br><span class="line">                num++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> (num % <span class="number">2</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">check</span><span class="params">(<span class="keyword">unsigned</span> <span class="keyword">char</span> step[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i;</span><br><span class="line">    <span class="keyword">int</span> p;</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; <span class="number">9</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (step[i] == <span class="number">0</span>)</span><br><span class="line">            p = i;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (check1(step) == ((<span class="number">8</span> - p) % <span class="number">2</span>))</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr>]]></content>
      
      
      <categories>
          
          <category> 数据结构 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据结构 </tag>
            
            <tag> C </tag>
            
            <tag> BFS </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
